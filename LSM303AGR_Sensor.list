
LSM303AGR_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004274  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b0  080045b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b8  080045b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08004630  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004630  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b265  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001930  00000000  00000000  0002b305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002cc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d47  00000000  00000000  0002df08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c854  00000000  00000000  00044c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b73  00000000  00000000  000514a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db016  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb8  00000000  00000000  000db068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043fc 	.word	0x080043fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080043fc 	.word	0x080043fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LSM303AGR_init>:
#include <main.h>
#include <stdio.h>
#include <math.h>
extern I2C_HandleTypeDef hi2c1;

void LSM303AGR_init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af04      	add	r7, sp, #16



	 HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (I_AM_LSM303AGR << 0) +1, 10, 100);
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	220a      	movs	r2, #10
 800058e:	2134      	movs	r1, #52	; 0x34
 8000590:	482c      	ldr	r0, [pc, #176]	; (8000644 <LSM303AGR_init+0xc0>)
 8000592:	f001 fb19 	bl	8001bc8 <HAL_I2C_IsDeviceReady>
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	  if(ret == HAL_OK){
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <LSM303AGR_init+0x24>

		  printf("Acceleration sensor is ready \r\n");
 80005a0:	4829      	ldr	r0, [pc, #164]	; (8000648 <LSM303AGR_init+0xc4>)
 80005a2:	f002 ffad 	bl	8003500 <puts>
 80005a6:	e002      	b.n	80005ae <LSM303AGR_init+0x2a>

	  }
	  else
	  {
		  printf("Acceleration sensor is not ready.Check Wires \r\n");
 80005a8:	4828      	ldr	r0, [pc, #160]	; (800064c <LSM303AGR_init+0xc8>)
 80005aa:	f002 ffa9 	bl	8003500 <puts>
	  }
	  uint8_t pData= LSM303AGR_ACC_SENSITIVITY_4G ; // ???
 80005ae:	2302      	movs	r3, #2
 80005b0:	717b      	strb	r3, [r7, #5]
	 ret =  HAL_I2C_Mem_Write(&hi2c1, (I_AM_LSM303AGR << 0) +1, ACC_I2C_ADDRESS , 1, &pData, 10,100);
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	9302      	str	r3, [sp, #8]
 80005b6:	230a      	movs	r3, #10
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	1d7b      	adds	r3, r7, #5
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	2232      	movs	r2, #50	; 0x32
 80005c2:	2134      	movs	r1, #52	; 0x34
 80005c4:	481f      	ldr	r0, [pc, #124]	; (8000644 <LSM303AGR_init+0xc0>)
 80005c6:	f000 ffdf 	bl	8001588 <HAL_I2C_Mem_Write>
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	  if(ret == HAL_OK )
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d103      	bne.n	80005dc <LSM303AGR_init+0x58>
	  {
		  printf("Writing to Register 2F ");
 80005d4:	481e      	ldr	r0, [pc, #120]	; (8000650 <LSM303AGR_init+0xcc>)
 80005d6:	f002 ff0d 	bl	80033f4 <iprintf>
 80005da:	e002      	b.n	80005e2 <LSM303AGR_init+0x5e>
	  }
	  else
	  {
		  printf("Failed to write to Register 2F");
 80005dc:	481d      	ldr	r0, [pc, #116]	; (8000654 <LSM303AGR_init+0xd0>)
 80005de:	f002 ff09 	bl	80033f4 <iprintf>
	  }

	  //Magnetometer
	  HAL_StatusTypeDef rat = HAL_I2C_IsDeviceReady(&hi2c1, (I_AM_LSM303AGR << 0) +1, 10, 100);
 80005e2:	2364      	movs	r3, #100	; 0x64
 80005e4:	220a      	movs	r2, #10
 80005e6:	2134      	movs	r1, #52	; 0x34
 80005e8:	4816      	ldr	r0, [pc, #88]	; (8000644 <LSM303AGR_init+0xc0>)
 80005ea:	f001 faed 	bl	8001bc8 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	71bb      	strb	r3, [r7, #6]
	 	  if(rat == HAL_OK){
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d103      	bne.n	8000600 <LSM303AGR_init+0x7c>

	 		  printf("Magnetometer sensor is ready \r\n");
 80005f8:	4817      	ldr	r0, [pc, #92]	; (8000658 <LSM303AGR_init+0xd4>)
 80005fa:	f002 ff81 	bl	8003500 <puts>
 80005fe:	e002      	b.n	8000606 <LSM303AGR_init+0x82>

	 	  }
	 	  else
	 	  {
	 		  printf("Magnetometer sensor is not ready.Check Wires \r\n");
 8000600:	4816      	ldr	r0, [pc, #88]	; (800065c <LSM303AGR_init+0xd8>)
 8000602:	f002 ff7d 	bl	8003500 <puts>
	 	  }
	 	  uint8_t qData= LSM303AGR_FS_1_3_GA ; // ???
 8000606:	2320      	movs	r3, #32
 8000608:	713b      	strb	r3, [r7, #4]
	 	 rat =  HAL_I2C_Mem_Write(&hi2c1, (I_AM_LSM303AGR << 0) +1, MAG_I2C_ADDRESS , 1, &qData, 10,100);
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	230a      	movs	r3, #10
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	223c      	movs	r2, #60	; 0x3c
 800061a:	2134      	movs	r1, #52	; 0x34
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <LSM303AGR_init+0xc0>)
 800061e:	f000 ffb3 	bl	8001588 <HAL_I2C_Mem_Write>
 8000622:	4603      	mov	r3, r0
 8000624:	71bb      	strb	r3, [r7, #6]
	 	  if(rat == HAL_OK )
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d103      	bne.n	8000634 <LSM303AGR_init+0xb0>
	 	  {
	 		  printf("Writing to Register 2F ");
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <LSM303AGR_init+0xcc>)
 800062e:	f002 fee1 	bl	80033f4 <iprintf>
	 		  printf("Failed to write to Register 2F");
	 	  }



}
 8000632:	e002      	b.n	800063a <LSM303AGR_init+0xb6>
	 		  printf("Failed to write to Register 2F");
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <LSM303AGR_init+0xd0>)
 8000636:	f002 fedd 	bl	80033f4 <iprintf>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000008c 	.word	0x2000008c
 8000648:	08004414 	.word	0x08004414
 800064c:	08004434 	.word	0x08004434
 8000650:	08004464 	.word	0x08004464
 8000654:	0800447c 	.word	0x0800447c
 8000658:	0800449c 	.word	0x0800449c
 800065c:	080044bc 	.word	0x080044bc

08000660 <LSM303AGR_read>:
void LSM303AGR_read(){
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t x_acc;
	 HAL_I2C_Mem_Read(&hi2c1 , I_AM_LSM303AGR ,LSM303AGR_CTRL_REG1_A, 5, &data , 5, 100);
 8000666:	2364      	movs	r3, #100	; 0x64
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	2305      	movs	r3, #5
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2305      	movs	r3, #5
 8000674:	2220      	movs	r2, #32
 8000676:	2133      	movs	r1, #51	; 0x33
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <LSM303AGR_read+0x44>)
 800067a:	f001 f87f 	bl	800177c <HAL_I2C_Mem_Read>

	x_acc = ((int16_t)data[0] << 8) + data[1];
 800067e:	793b      	ldrb	r3, [r7, #4]
 8000680:	b29b      	uxth	r3, r3
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	b29a      	uxth	r2, r3
 8000686:	797b      	ldrb	r3, [r7, #5]
 8000688:	b29b      	uxth	r3, r3
 800068a:	4413      	add	r3, r2
 800068c:	b29b      	uxth	r3, r3
 800068e:	80fb      	strh	r3, [r7, #6]
	printf("X_Acceleration = %d", x_acc);
 8000690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000694:	4619      	mov	r1, r3
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <LSM303AGR_read+0x48>)
 8000698:	f002 feac 	bl	80033f4 <iprintf>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	080044ec 	.word	0x080044ec

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fb0c 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f810 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f8d2 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006bc:	f000 f8a6 	bl	800080c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006c0:	f000 f876 	bl	80007b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LSM303AGR_init();
 80006c4:	f7ff ff5e 	bl	8000584 <LSM303AGR_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 LSM303AGR_read();
 80006c8:	f7ff ffca 	bl	8000660 <LSM303AGR_read>
	 HAL_Delay(1000);     //in ms
 80006cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d0:	f000 fb6e 	bl	8000db0 <HAL_Delay>
	 LSM303AGR_read();
 80006d4:	e7f8      	b.n	80006c8 <main+0x1c>
	...

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fe7c 	bl	80033e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <SystemClock_Config+0xd0>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <SystemClock_Config+0xd0>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd4>)
 8000726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800074c:	2310      	movs	r3, #16
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000750:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000756:	2304      	movs	r3, #4
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075a:	2307      	movs	r3, #7
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	4618      	mov	r0, r3
 8000764:	f001 feba 	bl	80024dc <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076e:	f000 f8e5 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f002 f91c 	bl	80029cc <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079a:	f000 f8cf 	bl	800093c <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C1_Init+0x50>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <MX_I2C1_Init+0x54>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2C1_Init+0x50>)
 80007bc:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_I2C1_Init+0x58>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_I2C1_Init+0x50>)
 80007ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_I2C1_Init+0x50>)
 80007ee:	f000 fd87 	bl	8001300 <HAL_I2C_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f8:	f000 f8a0 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000008c 	.word	0x2000008c
 8000804:	40005400 	.word	0x40005400
 8000808:	000186a0 	.word	0x000186a0

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f002 fae2 	bl	8002e0c <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f875 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000e0 	.word	0x200000e0
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <MX_GPIO_Init+0xd0>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a25      	ldr	r2, [pc, #148]	; (8000930 <MX_GPIO_Init+0xd0>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a17      	ldr	r2, [pc, #92]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_GPIO_Init+0xd4>)
 80008ec:	f000 fcee 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_GPIO_Init+0xd8>)
 8000908:	f000 fb5c 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800090c:	2320      	movs	r3, #32
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_GPIO_Init+0xd4>)
 8000924:	f000 fb4e 	bl	8000fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000
 8000938:	40020800 	.word	0x40020800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000986:	2007      	movs	r0, #7
 8000988:	f000 fae8 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_I2C_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12b      	bne.n	8000a12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d6:	23c0      	movs	r3, #192	; 0xc0
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009da:	2312      	movs	r3, #18
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e6:	2304      	movs	r3, #4
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <HAL_I2C_MspInit+0x8c>)
 80009f2:	f000 fae7 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a19      	ldr	r2, [pc, #100]	; (8000aac <HAL_UART_MspInit+0x84>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12b      	bne.n	8000aa2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a82:	230c      	movs	r3, #12
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_UART_MspInit+0x8c>)
 8000a9e:	f000 fa91 	bl	8000fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f934 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	e00a      	b.n	8000b34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b1e:	f3af 8000 	nop.w
 8000b22:	4601      	mov	r1, r0
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	60ba      	str	r2, [r7, #8]
 8000b2a:	b2ca      	uxtb	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbf0      	blt.n	8000b1e <_read+0x12>
  }

  return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	60f8      	str	r0, [r7, #12]
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	e009      	b.n	8000b6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	60ba      	str	r2, [r7, #8]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf1      	blt.n	8000b58 <_write+0x12>
  }
  return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_close>:

int _close(int file)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_isatty>:

int _isatty(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f002 fbba 	bl	8003390 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20018000 	.word	0x20018000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	20000124 	.word	0x20000124
 8000c50:	20000140 	.word	0x20000140

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca2:	f7ff ffd7 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f002 fb79 	bl	800339c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fcff 	bl	80006ac <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cbc:	080045c0 	.word	0x080045c0
  ldr r2, =_sbss
 8000cc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cc4:	2000013c 	.word	0x2000013c

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_Init+0x40>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_Init+0x40>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x40>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f931 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fe22 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f93b 	bl	8000faa <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f911 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000128 	.word	0x20000128

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000128 	.word	0x20000128

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff47 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff5c 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffb0 	bl	8000f18 <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e159      	b.n	8001294 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8148 	bne.w	800128e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80a2 	beq.w	800128e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b57      	ldr	r3, [pc, #348]	; (80012ac <HAL_GPIO_Init+0x2e8>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a56      	ldr	r2, [pc, #344]	; (80012ac <HAL_GPIO_Init+0x2e8>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b54      	ldr	r3, [pc, #336]	; (80012ac <HAL_GPIO_Init+0x2e8>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_GPIO_Init+0x2ec>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <HAL_GPIO_Init+0x2f0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x202>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_GPIO_Init+0x2f4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x1fe>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a47      	ldr	r2, [pc, #284]	; (80012bc <HAL_GPIO_Init+0x2f8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x1fa>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a46      	ldr	r2, [pc, #280]	; (80012c0 <HAL_GPIO_Init+0x2fc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x1f6>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a45      	ldr	r2, [pc, #276]	; (80012c4 <HAL_GPIO_Init+0x300>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x1f2>
 80011b2:	2304      	movs	r3, #4
 80011b4:	e008      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011c6:	2300      	movs	r3, #0
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d8:	4935      	ldr	r1, [pc, #212]	; (80012b0 <HAL_GPIO_Init+0x2ec>)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_GPIO_Init+0x304>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <HAL_GPIO_Init+0x304>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001210:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <HAL_GPIO_Init+0x304>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001234:	4a24      	ldr	r2, [pc, #144]	; (80012c8 <HAL_GPIO_Init+0x304>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <HAL_GPIO_Init+0x304>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <HAL_GPIO_Init+0x304>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_GPIO_Init+0x304>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_GPIO_Init+0x304>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3301      	adds	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f67f aea2 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e12b      	b.n	800156a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fb36 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2224      	movs	r2, #36	; 0x24
 8001330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001352:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001362:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001364:	f001 fd2a 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a81      	ldr	r2, [pc, #516]	; (8001574 <HAL_I2C_Init+0x274>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d807      	bhi.n	8001384 <HAL_I2C_Init+0x84>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4a80      	ldr	r2, [pc, #512]	; (8001578 <HAL_I2C_Init+0x278>)
 8001378:	4293      	cmp	r3, r2
 800137a:	bf94      	ite	ls
 800137c:	2301      	movls	r3, #1
 800137e:	2300      	movhi	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	e006      	b.n	8001392 <HAL_I2C_Init+0x92>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4a7d      	ldr	r2, [pc, #500]	; (800157c <HAL_I2C_Init+0x27c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	bf94      	ite	ls
 800138c:	2301      	movls	r3, #1
 800138e:	2300      	movhi	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0e7      	b.n	800156a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4a78      	ldr	r2, [pc, #480]	; (8001580 <HAL_I2C_Init+0x280>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	0c9b      	lsrs	r3, r3, #18
 80013a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a6a      	ldr	r2, [pc, #424]	; (8001574 <HAL_I2C_Init+0x274>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d802      	bhi.n	80013d4 <HAL_I2C_Init+0xd4>
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3301      	adds	r3, #1
 80013d2:	e009      	b.n	80013e8 <HAL_I2C_Init+0xe8>
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4a69      	ldr	r2, [pc, #420]	; (8001584 <HAL_I2C_Init+0x284>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	099b      	lsrs	r3, r3, #6
 80013e6:	3301      	adds	r3, #1
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	430b      	orrs	r3, r1
 80013ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	495c      	ldr	r1, [pc, #368]	; (8001574 <HAL_I2C_Init+0x274>)
 8001404:	428b      	cmp	r3, r1
 8001406:	d819      	bhi.n	800143c <HAL_I2C_Init+0x13c>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1e59      	subs	r1, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fbb1 f3f3 	udiv	r3, r1, r3
 8001416:	1c59      	adds	r1, r3, #1
 8001418:	f640 73fc 	movw	r3, #4092	; 0xffc
 800141c:	400b      	ands	r3, r1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00a      	beq.n	8001438 <HAL_I2C_Init+0x138>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1e59      	subs	r1, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001430:	3301      	adds	r3, #1
 8001432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001436:	e051      	b.n	80014dc <HAL_I2C_Init+0x1dc>
 8001438:	2304      	movs	r3, #4
 800143a:	e04f      	b.n	80014dc <HAL_I2C_Init+0x1dc>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d111      	bne.n	8001468 <HAL_I2C_Init+0x168>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1e58      	subs	r0, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	440b      	add	r3, r1
 8001452:	fbb0 f3f3 	udiv	r3, r0, r3
 8001456:	3301      	adds	r3, #1
 8001458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf0c      	ite	eq
 8001460:	2301      	moveq	r3, #1
 8001462:	2300      	movne	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	e012      	b.n	800148e <HAL_I2C_Init+0x18e>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e58      	subs	r0, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	0099      	lsls	r1, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	fbb0 f3f3 	udiv	r3, r0, r3
 800147e:	3301      	adds	r3, #1
 8001480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2300      	movne	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Init+0x196>
 8001492:	2301      	movs	r3, #1
 8001494:	e022      	b.n	80014dc <HAL_I2C_Init+0x1dc>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10e      	bne.n	80014bc <HAL_I2C_Init+0x1bc>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1e58      	subs	r0, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6859      	ldr	r1, [r3, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	440b      	add	r3, r1
 80014ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b0:	3301      	adds	r3, #1
 80014b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ba:	e00f      	b.n	80014dc <HAL_I2C_Init+0x1dc>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1e58      	subs	r0, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	0099      	lsls	r1, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	6809      	ldr	r1, [r1, #0]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69da      	ldr	r2, [r3, #28]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800150a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6911      	ldr	r1, [r2, #16]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68d2      	ldr	r2, [r2, #12]
 8001516:	4311      	orrs	r1, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	430b      	orrs	r3, r1
 800151e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	000186a0 	.word	0x000186a0
 8001578:	001e847f 	.word	0x001e847f
 800157c:	003d08ff 	.word	0x003d08ff
 8001580:	431bde83 	.word	0x431bde83
 8001584:	10624dd3 	.word	0x10624dd3

08001588 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af02      	add	r7, sp, #8
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	817b      	strh	r3, [r7, #10]
 800159a:	460b      	mov	r3, r1
 800159c:	813b      	strh	r3, [r7, #8]
 800159e:	4613      	mov	r3, r2
 80015a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015a2:	f7ff fbf9 	bl	8000d98 <HAL_GetTick>
 80015a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	f040 80d9 	bne.w	8001768 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2319      	movs	r3, #25
 80015bc:	2201      	movs	r2, #1
 80015be:	496d      	ldr	r1, [pc, #436]	; (8001774 <HAL_I2C_Mem_Write+0x1ec>)
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 fdad 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80015cc:	2302      	movs	r3, #2
 80015ce:	e0cc      	b.n	800176a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_I2C_Mem_Write+0x56>
 80015da:	2302      	movs	r3, #2
 80015dc:	e0c5      	b.n	800176a <HAL_I2C_Mem_Write+0x1e2>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d007      	beq.n	8001604 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2221      	movs	r2, #33	; 0x21
 8001618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2240      	movs	r2, #64	; 0x40
 8001620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4a4d      	ldr	r2, [pc, #308]	; (8001778 <HAL_I2C_Mem_Write+0x1f0>)
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001646:	88f8      	ldrh	r0, [r7, #6]
 8001648:	893a      	ldrh	r2, [r7, #8]
 800164a:	8979      	ldrh	r1, [r7, #10]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4603      	mov	r3, r0
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 fbe4 	bl	8001e24 <I2C_RequestMemoryWrite>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d052      	beq.n	8001708 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e081      	b.n	800176a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 fe2e 	bl	80022cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00d      	beq.n	8001692 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2b04      	cmp	r3, #4
 800167c:	d107      	bne.n	800168e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e06b      	b.n	800176a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d11b      	bne.n	8001708 <HAL_I2C_Mem_Write+0x180>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d017      	beq.n	8001708 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1aa      	bne.n	8001666 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 fe1a 	bl	800234e <I2C_WaitOnBTFFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00d      	beq.n	800173c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	2b04      	cmp	r3, #4
 8001726:	d107      	bne.n	8001738 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001736:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e016      	b.n	800176a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800174a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2220      	movs	r2, #32
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	e000      	b.n	800176a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001768:	2302      	movs	r3, #2
  }
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	00100002 	.word	0x00100002
 8001778:	ffff0000 	.word	0xffff0000

0800177c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af02      	add	r7, sp, #8
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4603      	mov	r3, r0
 800178c:	817b      	strh	r3, [r7, #10]
 800178e:	460b      	mov	r3, r1
 8001790:	813b      	strh	r3, [r7, #8]
 8001792:	4613      	mov	r3, r2
 8001794:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001796:	f7ff faff 	bl	8000d98 <HAL_GetTick>
 800179a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	f040 8208 	bne.w	8001bba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2319      	movs	r3, #25
 80017b0:	2201      	movs	r2, #1
 80017b2:	497b      	ldr	r1, [pc, #492]	; (80019a0 <HAL_I2C_Mem_Read+0x224>)
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fcb3 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
 80017c2:	e1fb      	b.n	8001bbc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_I2C_Mem_Read+0x56>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e1f4      	b.n	8001bbc <HAL_I2C_Mem_Read+0x440>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d007      	beq.n	80017f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001806:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2222      	movs	r2, #34	; 0x22
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a5b      	ldr	r2, [pc, #364]	; (80019a4 <HAL_I2C_Mem_Read+0x228>)
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800183a:	88f8      	ldrh	r0, [r7, #6]
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	8979      	ldrh	r1, [r7, #10]
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	4603      	mov	r3, r0
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fb80 	bl	8001f50 <I2C_RequestMemoryRead>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1b0      	b.n	8001bbc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185e:	2b00      	cmp	r3, #0
 8001860:	d113      	bne.n	800188a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	623b      	str	r3, [r7, #32]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	623b      	str	r3, [r7, #32]
 8001876:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e184      	b.n	8001b94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	2b01      	cmp	r3, #1
 8001890:	d11b      	bne.n	80018ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e164      	b.n	8001b94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d11b      	bne.n	800190a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	e144      	b.n	8001b94 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001920:	e138      	b.n	8001b94 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001926:	2b03      	cmp	r3, #3
 8001928:	f200 80f1 	bhi.w	8001b0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	2b01      	cmp	r3, #1
 8001932:	d123      	bne.n	800197c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fd49 	bl	80023d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e139      	b.n	8001bbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	855a      	strh	r2, [r3, #42]	; 0x2a
 800197a:	e10b      	b.n	8001b94 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	2b02      	cmp	r3, #2
 8001982:	d14e      	bne.n	8001a22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198a:	2200      	movs	r2, #0
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <HAL_I2C_Mem_Read+0x22c>)
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fbc6 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e10e      	b.n	8001bbc <HAL_I2C_Mem_Read+0x440>
 800199e:	bf00      	nop
 80019a0:	00100002 	.word	0x00100002
 80019a4:	ffff0000 	.word	0xffff0000
 80019a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a20:	e0b8      	b.n	8001b94 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4966      	ldr	r1, [pc, #408]	; (8001bc4 <HAL_I2C_Mem_Read+0x448>)
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 fb77 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0bf      	b.n	8001bbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a84:	2200      	movs	r2, #0
 8001a86:	494f      	ldr	r1, [pc, #316]	; (8001bc4 <HAL_I2C_Mem_Read+0x448>)
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fb49 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e091      	b.n	8001bbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691a      	ldr	r2, [r3, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b0c:	e042      	b.n	8001b94 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fc5c 	bl	80023d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e04c      	b.n	8001bbc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d118      	bne.n	8001b94 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f47f aec2 	bne.w	8001922 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	00010004 	.word	0x00010004

08001bc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff f8de 	bl	8000d98 <HAL_GetTick>
 8001bdc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	f040 8111 	bne.w	8001e12 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2319      	movs	r3, #25
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4988      	ldr	r1, [pc, #544]	; (8001e1c <HAL_I2C_IsDeviceReady+0x254>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 fa90 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
 8001c08:	e104      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_I2C_IsDeviceReady+0x50>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e0fd      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x24c>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d007      	beq.n	8001c3e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2224      	movs	r2, #36	; 0x24
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a70      	ldr	r2, [pc, #448]	; (8001e20 <HAL_I2C_IsDeviceReady+0x258>)
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c70:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fa4e 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00d      	beq.n	8001ca6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c98:	d103      	bne.n	8001ca2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e0b6      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cb4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f86f 	bl	8000d98 <HAL_GetTick>
 8001cba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cea:	e025      	b.n	8001d38 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cec:	f7ff f854 	bl	8000d98 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d302      	bcc.n	8001d02 <HAL_I2C_IsDeviceReady+0x13a>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d103      	bne.n	8001d0a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	22a0      	movs	r2, #160	; 0xa0
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2e:	bf0c      	ite	eq
 8001d30:	2301      	moveq	r3, #1
 8001d32:	2300      	movne	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2ba0      	cmp	r3, #160	; 0xa0
 8001d42:	d005      	beq.n	8001d50 <HAL_I2C_IsDeviceReady+0x188>
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_I2C_IsDeviceReady+0x188>
 8001d4a:	7dbb      	ldrb	r3, [r7, #22]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0cd      	beq.n	8001cec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d129      	bne.n	8001dba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d74:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2319      	movs	r3, #25
 8001d92:	2201      	movs	r2, #1
 8001d94:	4921      	ldr	r1, [pc, #132]	; (8001e1c <HAL_I2C_IsDeviceReady+0x254>)
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f9c2 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e036      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e02c      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dd2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2319      	movs	r3, #25
 8001dda:	2201      	movs	r2, #1
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <HAL_I2C_IsDeviceReady+0x254>)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f99e 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e012      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f4ff af32 	bcc.w	8001c62 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	00100002 	.word	0x00100002
 8001e20:	ffff0000 	.word	0xffff0000

08001e24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	4608      	mov	r0, r1
 8001e2e:	4611      	mov	r1, r2
 8001e30:	461a      	mov	r2, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	817b      	strh	r3, [r7, #10]
 8001e36:	460b      	mov	r3, r1
 8001e38:	813b      	strh	r3, [r7, #8]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f960 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00d      	beq.n	8001e82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e74:	d103      	bne.n	8001e7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e05f      	b.n	8001f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e82:	897b      	ldrh	r3, [r7, #10]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	6a3a      	ldr	r2, [r7, #32]
 8001e96:	492d      	ldr	r1, [pc, #180]	; (8001f4c <I2C_RequestMemoryWrite+0x128>)
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f998 	bl	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e04c      	b.n	8001f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec0:	6a39      	ldr	r1, [r7, #32]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fa02 	bl	80022cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00d      	beq.n	8001eea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d107      	bne.n	8001ee6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e02b      	b.n	8001f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ef0:	893b      	ldrh	r3, [r7, #8]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	611a      	str	r2, [r3, #16]
 8001efa:	e021      	b.n	8001f40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001efc:	893b      	ldrh	r3, [r7, #8]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	6a39      	ldr	r1, [r7, #32]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f9dc 	bl	80022cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00d      	beq.n	8001f36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d107      	bne.n	8001f32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e005      	b.n	8001f42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f36:	893b      	ldrh	r3, [r7, #8]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	00010002 	.word	0x00010002

08001f50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	4608      	mov	r0, r1
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	817b      	strh	r3, [r7, #10]
 8001f62:	460b      	mov	r3, r1
 8001f64:	813b      	strh	r3, [r7, #8]
 8001f66:	4613      	mov	r3, r2
 8001f68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f8c2 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb0:	d103      	bne.n	8001fba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0aa      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	6a3a      	ldr	r2, [r7, #32]
 8001fd2:	4952      	ldr	r1, [pc, #328]	; (800211c <I2C_RequestMemoryRead+0x1cc>)
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f8fa 	bl	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e097      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f964 	bl	80022cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b04      	cmp	r3, #4
 8002010:	d107      	bne.n	8002022 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e076      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800202c:	893b      	ldrh	r3, [r7, #8]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	611a      	str	r2, [r3, #16]
 8002036:	e021      	b.n	800207c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002038:	893b      	ldrh	r3, [r7, #8]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	b29b      	uxth	r3, r3
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002048:	6a39      	ldr	r1, [r7, #32]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f93e 	bl	80022cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00d      	beq.n	8002072 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b04      	cmp	r3, #4
 800205c:	d107      	bne.n	800206e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e050      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002072:	893b      	ldrh	r3, [r7, #8]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800207c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207e:	6a39      	ldr	r1, [r7, #32]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f923 	bl	80022cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00d      	beq.n	80020a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	2b04      	cmp	r3, #4
 8002092:	d107      	bne.n	80020a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e035      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	2200      	movs	r2, #0
 80020c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f82b 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00d      	beq.n	80020ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020de:	d103      	bne.n	80020e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e013      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020ec:	897b      	ldrh	r3, [r7, #10]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	6a3a      	ldr	r2, [r7, #32]
 8002100:	4906      	ldr	r1, [pc, #24]	; (800211c <I2C_RequestMemoryRead+0x1cc>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f863 	bl	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	00010002 	.word	0x00010002

08002120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002130:	e025      	b.n	800217e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d021      	beq.n	800217e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213a:	f7fe fe2d 	bl	8000d98 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d116      	bne.n	800217e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f043 0220 	orr.w	r2, r3, #32
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e023      	b.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10d      	bne.n	80021a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4013      	ands	r3, r2
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	e00c      	b.n	80021be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4013      	ands	r3, r2
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf0c      	ite	eq
 80021b6:	2301      	moveq	r3, #1
 80021b8:	2300      	movne	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d0b6      	beq.n	8002132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021dc:	e051      	b.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ec:	d123      	bne.n	8002236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002206:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f043 0204 	orr.w	r2, r3, #4
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e046      	b.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d021      	beq.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223e:	f7fe fdab 	bl	8000d98 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	429a      	cmp	r2, r3
 800224c:	d302      	bcc.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d116      	bne.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e020      	b.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10c      	bne.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4013      	ands	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	e00b      	b.n	80022be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	43da      	mvns	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d18d      	bne.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d8:	e02d      	b.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f8ce 	bl	800247c <I2C_IsAcknowledgeFailed>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e02d      	b.n	8002346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d021      	beq.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f2:	f7fe fd51 	bl	8000d98 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d116      	bne.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e007      	b.n	8002346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b80      	cmp	r3, #128	; 0x80
 8002342:	d1ca      	bne.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800235a:	e02d      	b.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f88d 	bl	800247c <I2C_IsAcknowledgeFailed>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e02d      	b.n	80023c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002372:	d021      	beq.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002374:	f7fe fd10 	bl	8000d98 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	d302      	bcc.n	800238a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e007      	b.n	80023c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d1ca      	bne.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023dc:	e042      	b.n	8002464 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d119      	bne.n	8002420 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0210 	mvn.w	r2, #16
 80023f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e029      	b.n	8002474 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002420:	f7fe fcba 	bl	8000d98 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	d302      	bcc.n	8002436 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e007      	b.n	8002474 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d1b5      	bne.n	80023de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	d11b      	bne.n	80024cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800249c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f043 0204 	orr.w	r2, r3, #4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e267      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d075      	beq.n	80025e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	4b88      	ldr	r3, [pc, #544]	; (800271c <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d00c      	beq.n	8002520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b85      	ldr	r3, [pc, #532]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800250e:	2b08      	cmp	r3, #8
 8002510:	d112      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002512:	4b82      	ldr	r3, [pc, #520]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251e:	d10b      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	4b7e      	ldr	r3, [pc, #504]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d157      	bne.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e242      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x74>
 8002542:	4b76      	ldr	r3, [pc, #472]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a75      	ldr	r2, [pc, #468]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b70      	ldr	r3, [pc, #448]	; (800271c <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6f      	ldr	r2, [pc, #444]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b6d      	ldr	r3, [pc, #436]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6c      	ldr	r2, [pc, #432]	; (800271c <HAL_RCC_OscConfig+0x240>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002574:	4b69      	ldr	r3, [pc, #420]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a68      	ldr	r2, [pc, #416]	; (800271c <HAL_RCC_OscConfig+0x240>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b66      	ldr	r3, [pc, #408]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a65      	ldr	r2, [pc, #404]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fc00 	bl	8000d98 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fbfc 	bl	8000d98 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e207      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b5b      	ldr	r3, [pc, #364]	; (800271c <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xc0>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fbec 	bl	8000d98 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fbe8 	bl	8000d98 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1f3      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	4b51      	ldr	r3, [pc, #324]	; (800271c <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d063      	beq.n	80026ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	4b4a      	ldr	r3, [pc, #296]	; (800271c <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002606:	2b08      	cmp	r3, #8
 8002608:	d11c      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260a:	4b44      	ldr	r3, [pc, #272]	; (800271c <HAL_RCC_OscConfig+0x240>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e1c7      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4937      	ldr	r1, [pc, #220]	; (800271c <HAL_RCC_OscConfig+0x240>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	e03a      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <HAL_RCC_OscConfig+0x244>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe fba1 	bl	8000d98 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe fb9d 	bl	8000d98 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1a8      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4925      	ldr	r1, [pc, #148]	; (800271c <HAL_RCC_OscConfig+0x240>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
 800268c:	e015      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCC_OscConfig+0x244>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fb80 	bl	8000d98 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fb7c 	bl	8000d98 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e187      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d036      	beq.n	8002734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_RCC_OscConfig+0x248>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fb60 	bl	8000d98 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026dc:	f7fe fb5c 	bl	8000d98 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e167      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_OscConfig+0x240>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x200>
 80026fa:	e01b      	b.n	8002734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_OscConfig+0x248>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe fb49 	bl	8000d98 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	e00e      	b.n	8002728 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270a:	f7fe fb45 	bl	8000d98 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d907      	bls.n	8002728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e150      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
 800271c:	40023800 	.word	0x40023800
 8002720:	42470000 	.word	0x42470000
 8002724:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x470>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ea      	bne.n	800270a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8097 	beq.w	8002870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002746:	4b81      	ldr	r3, [pc, #516]	; (800294c <HAL_RCC_OscConfig+0x470>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	4b7d      	ldr	r3, [pc, #500]	; (800294c <HAL_RCC_OscConfig+0x470>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a7c      	ldr	r2, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b7a      	ldr	r3, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x470>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	4b77      	ldr	r3, [pc, #476]	; (8002950 <HAL_RCC_OscConfig+0x474>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d118      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277e:	4b74      	ldr	r3, [pc, #464]	; (8002950 <HAL_RCC_OscConfig+0x474>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a73      	ldr	r2, [pc, #460]	; (8002950 <HAL_RCC_OscConfig+0x474>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278a:	f7fe fb05 	bl	8000d98 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002792:	f7fe fb01 	bl	8000d98 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e10c      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <HAL_RCC_OscConfig+0x474>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2ea>
 80027b8:	4b64      	ldr	r3, [pc, #400]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a63      	ldr	r2, [pc, #396]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
 80027c4:	e01c      	b.n	8002800 <HAL_RCC_OscConfig+0x324>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x30c>
 80027ce:	4b5f      	ldr	r3, [pc, #380]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	4a5e      	ldr	r2, [pc, #376]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6713      	str	r3, [r2, #112]	; 0x70
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a5b      	ldr	r2, [pc, #364]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0x324>
 80027e8:	4b58      	ldr	r3, [pc, #352]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a57      	ldr	r2, [pc, #348]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	4b55      	ldr	r3, [pc, #340]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	4a54      	ldr	r2, [pc, #336]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80027fa:	f023 0304 	bic.w	r3, r3, #4
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d015      	beq.n	8002834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fac6 	bl	8000d98 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe fac2 	bl	8000d98 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0cb      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	4b49      	ldr	r3, [pc, #292]	; (800294c <HAL_RCC_OscConfig+0x470>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0ee      	beq.n	8002810 <HAL_RCC_OscConfig+0x334>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7fe fab0 	bl	8000d98 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe faac 	bl	8000d98 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0b5      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002852:	4b3e      	ldr	r3, [pc, #248]	; (800294c <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1ee      	bne.n	800283c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002864:	4b39      	ldr	r3, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x470>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	4a38      	ldr	r2, [pc, #224]	; (800294c <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a1 	beq.w	80029bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800287a:	4b34      	ldr	r3, [pc, #208]	; (800294c <HAL_RCC_OscConfig+0x470>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b08      	cmp	r3, #8
 8002884:	d05c      	beq.n	8002940 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d141      	bne.n	8002912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_RCC_OscConfig+0x478>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe fa80 	bl	8000d98 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe fa7c 	bl	8000d98 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e087      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	019b      	lsls	r3, r3, #6
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	3b01      	subs	r3, #1
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	491b      	ldr	r1, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x470>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x478>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe fa55 	bl	8000d98 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fa51 	bl	8000d98 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e05c      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_RCC_OscConfig+0x470>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x416>
 8002910:	e054      	b.n	80029bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_RCC_OscConfig+0x478>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe fa3e 	bl	8000d98 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fa3a 	bl	8000d98 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e045      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_OscConfig+0x470>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x444>
 800293e:	e03d      	b.n	80029bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e038      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000
 8002954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d028      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d121      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d11a      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800298e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002990:	4293      	cmp	r3, r2
 8002992:	d111      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	3b01      	subs	r3, #1
 80029a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0cc      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d90c      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b8      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	494d      	ldr	r1, [pc, #308]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d044      	beq.n	8002aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e067      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4934      	ldr	r1, [pc, #208]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fe f96c 	bl	8000d98 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe f968 	bl	8000d98 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e04f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d20c      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4916      	ldr	r1, [pc, #88]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	490e      	ldr	r1, [pc, #56]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b52:	f000 f821 	bl	8002b98 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	490a      	ldr	r1, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f8cc 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08004500 	.word	0x08004500
 8002b90:	20000000 	.word	0x20000000
 8002b94:	20000004 	.word	0x20000004

08002b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b9c:	b094      	sub	sp, #80	; 0x50
 8002b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba8:	2300      	movs	r3, #0
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb0:	4b79      	ldr	r3, [pc, #484]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d00d      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	f200 80e1 	bhi.w	8002d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x34>
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bca:	e0db      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b73      	ldr	r3, [pc, #460]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bd0:	e0db      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd2:	4b73      	ldr	r3, [pc, #460]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd6:	e0d8      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd8:	4b6f      	ldr	r3, [pc, #444]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be2:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d063      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bee:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	099b      	lsrs	r3, r3, #6
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
 8002c02:	2300      	movs	r3, #0
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
 8002c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c0a:	4622      	mov	r2, r4
 8002c0c:	462b      	mov	r3, r5
 8002c0e:	f04f 0000 	mov.w	r0, #0
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	0159      	lsls	r1, r3, #5
 8002c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c1c:	0150      	lsls	r0, r2, #5
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4621      	mov	r1, r4
 8002c24:	1a51      	subs	r1, r2, r1
 8002c26:	6139      	str	r1, [r7, #16]
 8002c28:	4629      	mov	r1, r5
 8002c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	018b      	lsls	r3, r1, #6
 8002c40:	4651      	mov	r1, sl
 8002c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c46:	4651      	mov	r1, sl
 8002c48:	018a      	lsls	r2, r1, #6
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c50:	4659      	mov	r1, fp
 8002c52:	eb63 0901 	sbc.w	r9, r3, r1
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c6a:	4690      	mov	r8, r2
 8002c6c:	4699      	mov	r9, r3
 8002c6e:	4623      	mov	r3, r4
 8002c70:	eb18 0303 	adds.w	r3, r8, r3
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	462b      	mov	r3, r5
 8002c78:	eb49 0303 	adc.w	r3, r9, r3
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	024b      	lsls	r3, r1, #9
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c94:	4621      	mov	r1, r4
 8002c96:	024a      	lsls	r2, r1, #9
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ca8:	f7fd faea 	bl	8000280 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb4:	e058      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb6:	4b38      	ldr	r3, [pc, #224]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	f04f 0000 	mov.w	r0, #0
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	0159      	lsls	r1, r3, #5
 8002cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce2:	0150      	lsls	r0, r2, #5
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4641      	mov	r1, r8
 8002cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cee:	4649      	mov	r1, r9
 8002cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d08:	ebb2 040a 	subs.w	r4, r2, sl
 8002d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	00eb      	lsls	r3, r5, #3
 8002d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d1e:	00e2      	lsls	r2, r4, #3
 8002d20:	4614      	mov	r4, r2
 8002d22:	461d      	mov	r5, r3
 8002d24:	4643      	mov	r3, r8
 8002d26:	18e3      	adds	r3, r4, r3
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	eb45 0303 	adc.w	r3, r5, r3
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	028b      	lsls	r3, r1, #10
 8002d42:	4621      	mov	r1, r4
 8002d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d48:	4621      	mov	r1, r4
 8002d4a:	028a      	lsls	r2, r1, #10
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d52:	2200      	movs	r2, #0
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	61fa      	str	r2, [r7, #28]
 8002d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d5c:	f7fd fa90 	bl	8000280 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4613      	mov	r3, r2
 8002d66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	3301      	adds	r3, #1
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d82:	e002      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3750      	adds	r7, #80	; 0x50
 8002d90:	46bd      	mov	sp, r7
 8002d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	007a1200 	.word	0x007a1200

08002da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000000 	.word	0x20000000

08002dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dc0:	f7ff fff0 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0a9b      	lsrs	r3, r3, #10
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4903      	ldr	r1, [pc, #12]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08004510 	.word	0x08004510

08002de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de8:	f7ff ffdc 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0b5b      	lsrs	r3, r3, #13
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4903      	ldr	r1, [pc, #12]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	08004510 	.word	0x08004510

08002e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e03f      	b.n	8002e9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fd fdf8 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f829 	bl	8002ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b0c0      	sub	sp, #256	; 0x100
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	68d9      	ldr	r1, [r3, #12]
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	ea40 0301 	orr.w	r3, r0, r1
 8002ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f00:	f021 010c 	bic.w	r1, r1, #12
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f22:	6999      	ldr	r1, [r3, #24]
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	ea40 0301 	orr.w	r3, r0, r1
 8002f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b8f      	ldr	r3, [pc, #572]	; (8003174 <UART_SetConfig+0x2cc>)
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d005      	beq.n	8002f48 <UART_SetConfig+0xa0>
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b8d      	ldr	r3, [pc, #564]	; (8003178 <UART_SetConfig+0x2d0>)
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d104      	bne.n	8002f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f48:	f7ff ff4c 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8002f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f50:	e003      	b.n	8002f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f52:	f7ff ff33 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8002f56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f64:	f040 810c 	bne.w	8003180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	1891      	adds	r1, r2, r2
 8002f80:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f82:	415b      	adcs	r3, r3
 8002f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	eb12 0801 	adds.w	r8, r2, r1
 8002f90:	4629      	mov	r1, r5
 8002f92:	eb43 0901 	adc.w	r9, r3, r1
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002faa:	4690      	mov	r8, r2
 8002fac:	4699      	mov	r9, r3
 8002fae:	4623      	mov	r3, r4
 8002fb0:	eb18 0303 	adds.w	r3, r8, r3
 8002fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fb8:	462b      	mov	r3, r5
 8002fba:	eb49 0303 	adc.w	r3, r9, r3
 8002fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	18db      	adds	r3, r3, r3
 8002fda:	653b      	str	r3, [r7, #80]	; 0x50
 8002fdc:	4613      	mov	r3, r2
 8002fde:	eb42 0303 	adc.w	r3, r2, r3
 8002fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fec:	f7fd f948 	bl	8000280 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4b61      	ldr	r3, [pc, #388]	; (800317c <UART_SetConfig+0x2d4>)
 8002ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	011c      	lsls	r4, r3, #4
 8002ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003008:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800300c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003010:	4642      	mov	r2, r8
 8003012:	464b      	mov	r3, r9
 8003014:	1891      	adds	r1, r2, r2
 8003016:	64b9      	str	r1, [r7, #72]	; 0x48
 8003018:	415b      	adcs	r3, r3
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800301c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003020:	4641      	mov	r1, r8
 8003022:	eb12 0a01 	adds.w	sl, r2, r1
 8003026:	4649      	mov	r1, r9
 8003028:	eb43 0b01 	adc.w	fp, r3, r1
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800303c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003040:	4692      	mov	sl, r2
 8003042:	469b      	mov	fp, r3
 8003044:	4643      	mov	r3, r8
 8003046:	eb1a 0303 	adds.w	r3, sl, r3
 800304a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800304e:	464b      	mov	r3, r9
 8003050:	eb4b 0303 	adc.w	r3, fp, r3
 8003054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003064:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800306c:	460b      	mov	r3, r1
 800306e:	18db      	adds	r3, r3, r3
 8003070:	643b      	str	r3, [r7, #64]	; 0x40
 8003072:	4613      	mov	r3, r2
 8003074:	eb42 0303 	adc.w	r3, r2, r3
 8003078:	647b      	str	r3, [r7, #68]	; 0x44
 800307a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800307e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003082:	f7fd f8fd 	bl	8000280 <__aeabi_uldivmod>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4611      	mov	r1, r2
 800308c:	4b3b      	ldr	r3, [pc, #236]	; (800317c <UART_SetConfig+0x2d4>)
 800308e:	fba3 2301 	umull	r2, r3, r3, r1
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2264      	movs	r2, #100	; 0x64
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	1acb      	subs	r3, r1, r3
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030a2:	4b36      	ldr	r3, [pc, #216]	; (800317c <UART_SetConfig+0x2d4>)
 80030a4:	fba3 2302 	umull	r2, r3, r3, r2
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b0:	441c      	add	r4, r3
 80030b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030c4:	4642      	mov	r2, r8
 80030c6:	464b      	mov	r3, r9
 80030c8:	1891      	adds	r1, r2, r2
 80030ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80030cc:	415b      	adcs	r3, r3
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030d4:	4641      	mov	r1, r8
 80030d6:	1851      	adds	r1, r2, r1
 80030d8:	6339      	str	r1, [r7, #48]	; 0x30
 80030da:	4649      	mov	r1, r9
 80030dc:	414b      	adcs	r3, r1
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030ec:	4659      	mov	r1, fp
 80030ee:	00cb      	lsls	r3, r1, #3
 80030f0:	4651      	mov	r1, sl
 80030f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f6:	4651      	mov	r1, sl
 80030f8:	00ca      	lsls	r2, r1, #3
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	4642      	mov	r2, r8
 8003102:	189b      	adds	r3, r3, r2
 8003104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003108:	464b      	mov	r3, r9
 800310a:	460a      	mov	r2, r1
 800310c:	eb42 0303 	adc.w	r3, r2, r3
 8003110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003120:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003128:	460b      	mov	r3, r1
 800312a:	18db      	adds	r3, r3, r3
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
 800312e:	4613      	mov	r3, r2
 8003130:	eb42 0303 	adc.w	r3, r2, r3
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800313a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800313e:	f7fd f89f 	bl	8000280 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <UART_SetConfig+0x2d4>)
 8003148:	fba3 1302 	umull	r1, r3, r3, r2
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	2164      	movs	r1, #100	; 0x64
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	3332      	adds	r3, #50	; 0x32
 800315a:	4a08      	ldr	r2, [pc, #32]	; (800317c <UART_SetConfig+0x2d4>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	f003 0207 	and.w	r2, r3, #7
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4422      	add	r2, r4
 800316e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003170:	e105      	b.n	800337e <UART_SetConfig+0x4d6>
 8003172:	bf00      	nop
 8003174:	40011000 	.word	0x40011000
 8003178:	40011400 	.word	0x40011400
 800317c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003184:	2200      	movs	r2, #0
 8003186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800318a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800318e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003192:	4642      	mov	r2, r8
 8003194:	464b      	mov	r3, r9
 8003196:	1891      	adds	r1, r2, r2
 8003198:	6239      	str	r1, [r7, #32]
 800319a:	415b      	adcs	r3, r3
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
 800319e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031a2:	4641      	mov	r1, r8
 80031a4:	1854      	adds	r4, r2, r1
 80031a6:	4649      	mov	r1, r9
 80031a8:	eb43 0501 	adc.w	r5, r3, r1
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	00eb      	lsls	r3, r5, #3
 80031b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ba:	00e2      	lsls	r2, r4, #3
 80031bc:	4614      	mov	r4, r2
 80031be:	461d      	mov	r5, r3
 80031c0:	4643      	mov	r3, r8
 80031c2:	18e3      	adds	r3, r4, r3
 80031c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031c8:	464b      	mov	r3, r9
 80031ca:	eb45 0303 	adc.w	r3, r5, r3
 80031ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031ee:	4629      	mov	r1, r5
 80031f0:	008b      	lsls	r3, r1, #2
 80031f2:	4621      	mov	r1, r4
 80031f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f8:	4621      	mov	r1, r4
 80031fa:	008a      	lsls	r2, r1, #2
 80031fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003200:	f7fd f83e 	bl	8000280 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4b60      	ldr	r3, [pc, #384]	; (800338c <UART_SetConfig+0x4e4>)
 800320a:	fba3 2302 	umull	r2, r3, r3, r2
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	011c      	lsls	r4, r3, #4
 8003212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003216:	2200      	movs	r2, #0
 8003218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800321c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003224:	4642      	mov	r2, r8
 8003226:	464b      	mov	r3, r9
 8003228:	1891      	adds	r1, r2, r2
 800322a:	61b9      	str	r1, [r7, #24]
 800322c:	415b      	adcs	r3, r3
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003234:	4641      	mov	r1, r8
 8003236:	1851      	adds	r1, r2, r1
 8003238:	6139      	str	r1, [r7, #16]
 800323a:	4649      	mov	r1, r9
 800323c:	414b      	adcs	r3, r1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800324c:	4659      	mov	r1, fp
 800324e:	00cb      	lsls	r3, r1, #3
 8003250:	4651      	mov	r1, sl
 8003252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003256:	4651      	mov	r1, sl
 8003258:	00ca      	lsls	r2, r1, #3
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	4603      	mov	r3, r0
 8003260:	4642      	mov	r2, r8
 8003262:	189b      	adds	r3, r3, r2
 8003264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003268:	464b      	mov	r3, r9
 800326a:	460a      	mov	r2, r1
 800326c:	eb42 0303 	adc.w	r3, r2, r3
 8003270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	67bb      	str	r3, [r7, #120]	; 0x78
 800327e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800328c:	4649      	mov	r1, r9
 800328e:	008b      	lsls	r3, r1, #2
 8003290:	4641      	mov	r1, r8
 8003292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003296:	4641      	mov	r1, r8
 8003298:	008a      	lsls	r2, r1, #2
 800329a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800329e:	f7fc ffef 	bl	8000280 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <UART_SetConfig+0x4e4>)
 80032a8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2164      	movs	r1, #100	; 0x64
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	3332      	adds	r3, #50	; 0x32
 80032ba:	4a34      	ldr	r2, [pc, #208]	; (800338c <UART_SetConfig+0x4e4>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c6:	441c      	add	r4, r3
 80032c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032cc:	2200      	movs	r2, #0
 80032ce:	673b      	str	r3, [r7, #112]	; 0x70
 80032d0:	677a      	str	r2, [r7, #116]	; 0x74
 80032d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032d6:	4642      	mov	r2, r8
 80032d8:	464b      	mov	r3, r9
 80032da:	1891      	adds	r1, r2, r2
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	415b      	adcs	r3, r3
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032e6:	4641      	mov	r1, r8
 80032e8:	1851      	adds	r1, r2, r1
 80032ea:	6039      	str	r1, [r7, #0]
 80032ec:	4649      	mov	r1, r9
 80032ee:	414b      	adcs	r3, r1
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032fe:	4659      	mov	r1, fp
 8003300:	00cb      	lsls	r3, r1, #3
 8003302:	4651      	mov	r1, sl
 8003304:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003308:	4651      	mov	r1, sl
 800330a:	00ca      	lsls	r2, r1, #3
 800330c:	4610      	mov	r0, r2
 800330e:	4619      	mov	r1, r3
 8003310:	4603      	mov	r3, r0
 8003312:	4642      	mov	r2, r8
 8003314:	189b      	adds	r3, r3, r2
 8003316:	66bb      	str	r3, [r7, #104]	; 0x68
 8003318:	464b      	mov	r3, r9
 800331a:	460a      	mov	r2, r1
 800331c:	eb42 0303 	adc.w	r3, r2, r3
 8003320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	663b      	str	r3, [r7, #96]	; 0x60
 800332c:	667a      	str	r2, [r7, #100]	; 0x64
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800333a:	4649      	mov	r1, r9
 800333c:	008b      	lsls	r3, r1, #2
 800333e:	4641      	mov	r1, r8
 8003340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003344:	4641      	mov	r1, r8
 8003346:	008a      	lsls	r2, r1, #2
 8003348:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800334c:	f7fc ff98 	bl	8000280 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4b0d      	ldr	r3, [pc, #52]	; (800338c <UART_SetConfig+0x4e4>)
 8003356:	fba3 1302 	umull	r1, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2164      	movs	r1, #100	; 0x64
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3332      	adds	r3, #50	; 0x32
 8003368:	4a08      	ldr	r2, [pc, #32]	; (800338c <UART_SetConfig+0x4e4>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4422      	add	r2, r4
 800337c:	609a      	str	r2, [r3, #8]
}
 800337e:	bf00      	nop
 8003380:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003384:	46bd      	mov	sp, r7
 8003386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800338a:	bf00      	nop
 800338c:	51eb851f 	.word	0x51eb851f

08003390 <__errno>:
 8003390:	4b01      	ldr	r3, [pc, #4]	; (8003398 <__errno+0x8>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	2000000c 	.word	0x2000000c

0800339c <__libc_init_array>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4d0d      	ldr	r5, [pc, #52]	; (80033d4 <__libc_init_array+0x38>)
 80033a0:	4c0d      	ldr	r4, [pc, #52]	; (80033d8 <__libc_init_array+0x3c>)
 80033a2:	1b64      	subs	r4, r4, r5
 80033a4:	10a4      	asrs	r4, r4, #2
 80033a6:	2600      	movs	r6, #0
 80033a8:	42a6      	cmp	r6, r4
 80033aa:	d109      	bne.n	80033c0 <__libc_init_array+0x24>
 80033ac:	4d0b      	ldr	r5, [pc, #44]	; (80033dc <__libc_init_array+0x40>)
 80033ae:	4c0c      	ldr	r4, [pc, #48]	; (80033e0 <__libc_init_array+0x44>)
 80033b0:	f001 f824 	bl	80043fc <_init>
 80033b4:	1b64      	subs	r4, r4, r5
 80033b6:	10a4      	asrs	r4, r4, #2
 80033b8:	2600      	movs	r6, #0
 80033ba:	42a6      	cmp	r6, r4
 80033bc:	d105      	bne.n	80033ca <__libc_init_array+0x2e>
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c4:	4798      	blx	r3
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7ee      	b.n	80033a8 <__libc_init_array+0xc>
 80033ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ce:	4798      	blx	r3
 80033d0:	3601      	adds	r6, #1
 80033d2:	e7f2      	b.n	80033ba <__libc_init_array+0x1e>
 80033d4:	080045b8 	.word	0x080045b8
 80033d8:	080045b8 	.word	0x080045b8
 80033dc:	080045b8 	.word	0x080045b8
 80033e0:	080045bc 	.word	0x080045bc

080033e4 <memset>:
 80033e4:	4402      	add	r2, r0
 80033e6:	4603      	mov	r3, r0
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d100      	bne.n	80033ee <memset+0xa>
 80033ec:	4770      	bx	lr
 80033ee:	f803 1b01 	strb.w	r1, [r3], #1
 80033f2:	e7f9      	b.n	80033e8 <memset+0x4>

080033f4 <iprintf>:
 80033f4:	b40f      	push	{r0, r1, r2, r3}
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <iprintf+0x2c>)
 80033f8:	b513      	push	{r0, r1, r4, lr}
 80033fa:	681c      	ldr	r4, [r3, #0]
 80033fc:	b124      	cbz	r4, 8003408 <iprintf+0x14>
 80033fe:	69a3      	ldr	r3, [r4, #24]
 8003400:	b913      	cbnz	r3, 8003408 <iprintf+0x14>
 8003402:	4620      	mov	r0, r4
 8003404:	f000 fa5e 	bl	80038c4 <__sinit>
 8003408:	ab05      	add	r3, sp, #20
 800340a:	9a04      	ldr	r2, [sp, #16]
 800340c:	68a1      	ldr	r1, [r4, #8]
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	4620      	mov	r0, r4
 8003412:	f000 fc67 	bl	8003ce4 <_vfiprintf_r>
 8003416:	b002      	add	sp, #8
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	b004      	add	sp, #16
 800341e:	4770      	bx	lr
 8003420:	2000000c 	.word	0x2000000c

08003424 <_puts_r>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	460e      	mov	r6, r1
 8003428:	4605      	mov	r5, r0
 800342a:	b118      	cbz	r0, 8003434 <_puts_r+0x10>
 800342c:	6983      	ldr	r3, [r0, #24]
 800342e:	b90b      	cbnz	r3, 8003434 <_puts_r+0x10>
 8003430:	f000 fa48 	bl	80038c4 <__sinit>
 8003434:	69ab      	ldr	r3, [r5, #24]
 8003436:	68ac      	ldr	r4, [r5, #8]
 8003438:	b913      	cbnz	r3, 8003440 <_puts_r+0x1c>
 800343a:	4628      	mov	r0, r5
 800343c:	f000 fa42 	bl	80038c4 <__sinit>
 8003440:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <_puts_r+0xd0>)
 8003442:	429c      	cmp	r4, r3
 8003444:	d120      	bne.n	8003488 <_puts_r+0x64>
 8003446:	686c      	ldr	r4, [r5, #4]
 8003448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800344a:	07db      	lsls	r3, r3, #31
 800344c:	d405      	bmi.n	800345a <_puts_r+0x36>
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	0598      	lsls	r0, r3, #22
 8003452:	d402      	bmi.n	800345a <_puts_r+0x36>
 8003454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003456:	f000 fad3 	bl	8003a00 <__retarget_lock_acquire_recursive>
 800345a:	89a3      	ldrh	r3, [r4, #12]
 800345c:	0719      	lsls	r1, r3, #28
 800345e:	d51d      	bpl.n	800349c <_puts_r+0x78>
 8003460:	6923      	ldr	r3, [r4, #16]
 8003462:	b1db      	cbz	r3, 800349c <_puts_r+0x78>
 8003464:	3e01      	subs	r6, #1
 8003466:	68a3      	ldr	r3, [r4, #8]
 8003468:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800346c:	3b01      	subs	r3, #1
 800346e:	60a3      	str	r3, [r4, #8]
 8003470:	bb39      	cbnz	r1, 80034c2 <_puts_r+0x9e>
 8003472:	2b00      	cmp	r3, #0
 8003474:	da38      	bge.n	80034e8 <_puts_r+0xc4>
 8003476:	4622      	mov	r2, r4
 8003478:	210a      	movs	r1, #10
 800347a:	4628      	mov	r0, r5
 800347c:	f000 f848 	bl	8003510 <__swbuf_r>
 8003480:	3001      	adds	r0, #1
 8003482:	d011      	beq.n	80034a8 <_puts_r+0x84>
 8003484:	250a      	movs	r5, #10
 8003486:	e011      	b.n	80034ac <_puts_r+0x88>
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <_puts_r+0xd4>)
 800348a:	429c      	cmp	r4, r3
 800348c:	d101      	bne.n	8003492 <_puts_r+0x6e>
 800348e:	68ac      	ldr	r4, [r5, #8]
 8003490:	e7da      	b.n	8003448 <_puts_r+0x24>
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <_puts_r+0xd8>)
 8003494:	429c      	cmp	r4, r3
 8003496:	bf08      	it	eq
 8003498:	68ec      	ldreq	r4, [r5, #12]
 800349a:	e7d5      	b.n	8003448 <_puts_r+0x24>
 800349c:	4621      	mov	r1, r4
 800349e:	4628      	mov	r0, r5
 80034a0:	f000 f888 	bl	80035b4 <__swsetup_r>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d0dd      	beq.n	8003464 <_puts_r+0x40>
 80034a8:	f04f 35ff 	mov.w	r5, #4294967295
 80034ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ae:	07da      	lsls	r2, r3, #31
 80034b0:	d405      	bmi.n	80034be <_puts_r+0x9a>
 80034b2:	89a3      	ldrh	r3, [r4, #12]
 80034b4:	059b      	lsls	r3, r3, #22
 80034b6:	d402      	bmi.n	80034be <_puts_r+0x9a>
 80034b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ba:	f000 faa2 	bl	8003a02 <__retarget_lock_release_recursive>
 80034be:	4628      	mov	r0, r5
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da04      	bge.n	80034d0 <_puts_r+0xac>
 80034c6:	69a2      	ldr	r2, [r4, #24]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dc06      	bgt.n	80034da <_puts_r+0xb6>
 80034cc:	290a      	cmp	r1, #10
 80034ce:	d004      	beq.n	80034da <_puts_r+0xb6>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	6022      	str	r2, [r4, #0]
 80034d6:	7019      	strb	r1, [r3, #0]
 80034d8:	e7c5      	b.n	8003466 <_puts_r+0x42>
 80034da:	4622      	mov	r2, r4
 80034dc:	4628      	mov	r0, r5
 80034de:	f000 f817 	bl	8003510 <__swbuf_r>
 80034e2:	3001      	adds	r0, #1
 80034e4:	d1bf      	bne.n	8003466 <_puts_r+0x42>
 80034e6:	e7df      	b.n	80034a8 <_puts_r+0x84>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	250a      	movs	r5, #10
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	6022      	str	r2, [r4, #0]
 80034f0:	701d      	strb	r5, [r3, #0]
 80034f2:	e7db      	b.n	80034ac <_puts_r+0x88>
 80034f4:	0800453c 	.word	0x0800453c
 80034f8:	0800455c 	.word	0x0800455c
 80034fc:	0800451c 	.word	0x0800451c

08003500 <puts>:
 8003500:	4b02      	ldr	r3, [pc, #8]	; (800350c <puts+0xc>)
 8003502:	4601      	mov	r1, r0
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	f7ff bf8d 	b.w	8003424 <_puts_r>
 800350a:	bf00      	nop
 800350c:	2000000c 	.word	0x2000000c

08003510 <__swbuf_r>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	460e      	mov	r6, r1
 8003514:	4614      	mov	r4, r2
 8003516:	4605      	mov	r5, r0
 8003518:	b118      	cbz	r0, 8003522 <__swbuf_r+0x12>
 800351a:	6983      	ldr	r3, [r0, #24]
 800351c:	b90b      	cbnz	r3, 8003522 <__swbuf_r+0x12>
 800351e:	f000 f9d1 	bl	80038c4 <__sinit>
 8003522:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <__swbuf_r+0x98>)
 8003524:	429c      	cmp	r4, r3
 8003526:	d12b      	bne.n	8003580 <__swbuf_r+0x70>
 8003528:	686c      	ldr	r4, [r5, #4]
 800352a:	69a3      	ldr	r3, [r4, #24]
 800352c:	60a3      	str	r3, [r4, #8]
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	071a      	lsls	r2, r3, #28
 8003532:	d52f      	bpl.n	8003594 <__swbuf_r+0x84>
 8003534:	6923      	ldr	r3, [r4, #16]
 8003536:	b36b      	cbz	r3, 8003594 <__swbuf_r+0x84>
 8003538:	6923      	ldr	r3, [r4, #16]
 800353a:	6820      	ldr	r0, [r4, #0]
 800353c:	1ac0      	subs	r0, r0, r3
 800353e:	6963      	ldr	r3, [r4, #20]
 8003540:	b2f6      	uxtb	r6, r6
 8003542:	4283      	cmp	r3, r0
 8003544:	4637      	mov	r7, r6
 8003546:	dc04      	bgt.n	8003552 <__swbuf_r+0x42>
 8003548:	4621      	mov	r1, r4
 800354a:	4628      	mov	r0, r5
 800354c:	f000 f926 	bl	800379c <_fflush_r>
 8003550:	bb30      	cbnz	r0, 80035a0 <__swbuf_r+0x90>
 8003552:	68a3      	ldr	r3, [r4, #8]
 8003554:	3b01      	subs	r3, #1
 8003556:	60a3      	str	r3, [r4, #8]
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	6022      	str	r2, [r4, #0]
 800355e:	701e      	strb	r6, [r3, #0]
 8003560:	6963      	ldr	r3, [r4, #20]
 8003562:	3001      	adds	r0, #1
 8003564:	4283      	cmp	r3, r0
 8003566:	d004      	beq.n	8003572 <__swbuf_r+0x62>
 8003568:	89a3      	ldrh	r3, [r4, #12]
 800356a:	07db      	lsls	r3, r3, #31
 800356c:	d506      	bpl.n	800357c <__swbuf_r+0x6c>
 800356e:	2e0a      	cmp	r6, #10
 8003570:	d104      	bne.n	800357c <__swbuf_r+0x6c>
 8003572:	4621      	mov	r1, r4
 8003574:	4628      	mov	r0, r5
 8003576:	f000 f911 	bl	800379c <_fflush_r>
 800357a:	b988      	cbnz	r0, 80035a0 <__swbuf_r+0x90>
 800357c:	4638      	mov	r0, r7
 800357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <__swbuf_r+0x9c>)
 8003582:	429c      	cmp	r4, r3
 8003584:	d101      	bne.n	800358a <__swbuf_r+0x7a>
 8003586:	68ac      	ldr	r4, [r5, #8]
 8003588:	e7cf      	b.n	800352a <__swbuf_r+0x1a>
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <__swbuf_r+0xa0>)
 800358c:	429c      	cmp	r4, r3
 800358e:	bf08      	it	eq
 8003590:	68ec      	ldreq	r4, [r5, #12]
 8003592:	e7ca      	b.n	800352a <__swbuf_r+0x1a>
 8003594:	4621      	mov	r1, r4
 8003596:	4628      	mov	r0, r5
 8003598:	f000 f80c 	bl	80035b4 <__swsetup_r>
 800359c:	2800      	cmp	r0, #0
 800359e:	d0cb      	beq.n	8003538 <__swbuf_r+0x28>
 80035a0:	f04f 37ff 	mov.w	r7, #4294967295
 80035a4:	e7ea      	b.n	800357c <__swbuf_r+0x6c>
 80035a6:	bf00      	nop
 80035a8:	0800453c 	.word	0x0800453c
 80035ac:	0800455c 	.word	0x0800455c
 80035b0:	0800451c 	.word	0x0800451c

080035b4 <__swsetup_r>:
 80035b4:	4b32      	ldr	r3, [pc, #200]	; (8003680 <__swsetup_r+0xcc>)
 80035b6:	b570      	push	{r4, r5, r6, lr}
 80035b8:	681d      	ldr	r5, [r3, #0]
 80035ba:	4606      	mov	r6, r0
 80035bc:	460c      	mov	r4, r1
 80035be:	b125      	cbz	r5, 80035ca <__swsetup_r+0x16>
 80035c0:	69ab      	ldr	r3, [r5, #24]
 80035c2:	b913      	cbnz	r3, 80035ca <__swsetup_r+0x16>
 80035c4:	4628      	mov	r0, r5
 80035c6:	f000 f97d 	bl	80038c4 <__sinit>
 80035ca:	4b2e      	ldr	r3, [pc, #184]	; (8003684 <__swsetup_r+0xd0>)
 80035cc:	429c      	cmp	r4, r3
 80035ce:	d10f      	bne.n	80035f0 <__swsetup_r+0x3c>
 80035d0:	686c      	ldr	r4, [r5, #4]
 80035d2:	89a3      	ldrh	r3, [r4, #12]
 80035d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035d8:	0719      	lsls	r1, r3, #28
 80035da:	d42c      	bmi.n	8003636 <__swsetup_r+0x82>
 80035dc:	06dd      	lsls	r5, r3, #27
 80035de:	d411      	bmi.n	8003604 <__swsetup_r+0x50>
 80035e0:	2309      	movs	r3, #9
 80035e2:	6033      	str	r3, [r6, #0]
 80035e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035e8:	81a3      	strh	r3, [r4, #12]
 80035ea:	f04f 30ff 	mov.w	r0, #4294967295
 80035ee:	e03e      	b.n	800366e <__swsetup_r+0xba>
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <__swsetup_r+0xd4>)
 80035f2:	429c      	cmp	r4, r3
 80035f4:	d101      	bne.n	80035fa <__swsetup_r+0x46>
 80035f6:	68ac      	ldr	r4, [r5, #8]
 80035f8:	e7eb      	b.n	80035d2 <__swsetup_r+0x1e>
 80035fa:	4b24      	ldr	r3, [pc, #144]	; (800368c <__swsetup_r+0xd8>)
 80035fc:	429c      	cmp	r4, r3
 80035fe:	bf08      	it	eq
 8003600:	68ec      	ldreq	r4, [r5, #12]
 8003602:	e7e6      	b.n	80035d2 <__swsetup_r+0x1e>
 8003604:	0758      	lsls	r0, r3, #29
 8003606:	d512      	bpl.n	800362e <__swsetup_r+0x7a>
 8003608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800360a:	b141      	cbz	r1, 800361e <__swsetup_r+0x6a>
 800360c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003610:	4299      	cmp	r1, r3
 8003612:	d002      	beq.n	800361a <__swsetup_r+0x66>
 8003614:	4630      	mov	r0, r6
 8003616:	f000 fa5b 	bl	8003ad0 <_free_r>
 800361a:	2300      	movs	r3, #0
 800361c:	6363      	str	r3, [r4, #52]	; 0x34
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	2300      	movs	r3, #0
 8003628:	6063      	str	r3, [r4, #4]
 800362a:	6923      	ldr	r3, [r4, #16]
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	81a3      	strh	r3, [r4, #12]
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	b94b      	cbnz	r3, 800364e <__swsetup_r+0x9a>
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003644:	d003      	beq.n	800364e <__swsetup_r+0x9a>
 8003646:	4621      	mov	r1, r4
 8003648:	4630      	mov	r0, r6
 800364a:	f000 fa01 	bl	8003a50 <__smakebuf_r>
 800364e:	89a0      	ldrh	r0, [r4, #12]
 8003650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003654:	f010 0301 	ands.w	r3, r0, #1
 8003658:	d00a      	beq.n	8003670 <__swsetup_r+0xbc>
 800365a:	2300      	movs	r3, #0
 800365c:	60a3      	str	r3, [r4, #8]
 800365e:	6963      	ldr	r3, [r4, #20]
 8003660:	425b      	negs	r3, r3
 8003662:	61a3      	str	r3, [r4, #24]
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	b943      	cbnz	r3, 800367a <__swsetup_r+0xc6>
 8003668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800366c:	d1ba      	bne.n	80035e4 <__swsetup_r+0x30>
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	0781      	lsls	r1, r0, #30
 8003672:	bf58      	it	pl
 8003674:	6963      	ldrpl	r3, [r4, #20]
 8003676:	60a3      	str	r3, [r4, #8]
 8003678:	e7f4      	b.n	8003664 <__swsetup_r+0xb0>
 800367a:	2000      	movs	r0, #0
 800367c:	e7f7      	b.n	800366e <__swsetup_r+0xba>
 800367e:	bf00      	nop
 8003680:	2000000c 	.word	0x2000000c
 8003684:	0800453c 	.word	0x0800453c
 8003688:	0800455c 	.word	0x0800455c
 800368c:	0800451c 	.word	0x0800451c

08003690 <__sflush_r>:
 8003690:	898a      	ldrh	r2, [r1, #12]
 8003692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003696:	4605      	mov	r5, r0
 8003698:	0710      	lsls	r0, r2, #28
 800369a:	460c      	mov	r4, r1
 800369c:	d458      	bmi.n	8003750 <__sflush_r+0xc0>
 800369e:	684b      	ldr	r3, [r1, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	dc05      	bgt.n	80036b0 <__sflush_r+0x20>
 80036a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	dc02      	bgt.n	80036b0 <__sflush_r+0x20>
 80036aa:	2000      	movs	r0, #0
 80036ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036b2:	2e00      	cmp	r6, #0
 80036b4:	d0f9      	beq.n	80036aa <__sflush_r+0x1a>
 80036b6:	2300      	movs	r3, #0
 80036b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036bc:	682f      	ldr	r7, [r5, #0]
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	d032      	beq.n	8003728 <__sflush_r+0x98>
 80036c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	075a      	lsls	r2, r3, #29
 80036c8:	d505      	bpl.n	80036d6 <__sflush_r+0x46>
 80036ca:	6863      	ldr	r3, [r4, #4]
 80036cc:	1ac0      	subs	r0, r0, r3
 80036ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036d0:	b10b      	cbz	r3, 80036d6 <__sflush_r+0x46>
 80036d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036d4:	1ac0      	subs	r0, r0, r3
 80036d6:	2300      	movs	r3, #0
 80036d8:	4602      	mov	r2, r0
 80036da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036dc:	6a21      	ldr	r1, [r4, #32]
 80036de:	4628      	mov	r0, r5
 80036e0:	47b0      	blx	r6
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	d106      	bne.n	80036f6 <__sflush_r+0x66>
 80036e8:	6829      	ldr	r1, [r5, #0]
 80036ea:	291d      	cmp	r1, #29
 80036ec:	d82c      	bhi.n	8003748 <__sflush_r+0xb8>
 80036ee:	4a2a      	ldr	r2, [pc, #168]	; (8003798 <__sflush_r+0x108>)
 80036f0:	40ca      	lsrs	r2, r1
 80036f2:	07d6      	lsls	r6, r2, #31
 80036f4:	d528      	bpl.n	8003748 <__sflush_r+0xb8>
 80036f6:	2200      	movs	r2, #0
 80036f8:	6062      	str	r2, [r4, #4]
 80036fa:	04d9      	lsls	r1, r3, #19
 80036fc:	6922      	ldr	r2, [r4, #16]
 80036fe:	6022      	str	r2, [r4, #0]
 8003700:	d504      	bpl.n	800370c <__sflush_r+0x7c>
 8003702:	1c42      	adds	r2, r0, #1
 8003704:	d101      	bne.n	800370a <__sflush_r+0x7a>
 8003706:	682b      	ldr	r3, [r5, #0]
 8003708:	b903      	cbnz	r3, 800370c <__sflush_r+0x7c>
 800370a:	6560      	str	r0, [r4, #84]	; 0x54
 800370c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800370e:	602f      	str	r7, [r5, #0]
 8003710:	2900      	cmp	r1, #0
 8003712:	d0ca      	beq.n	80036aa <__sflush_r+0x1a>
 8003714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003718:	4299      	cmp	r1, r3
 800371a:	d002      	beq.n	8003722 <__sflush_r+0x92>
 800371c:	4628      	mov	r0, r5
 800371e:	f000 f9d7 	bl	8003ad0 <_free_r>
 8003722:	2000      	movs	r0, #0
 8003724:	6360      	str	r0, [r4, #52]	; 0x34
 8003726:	e7c1      	b.n	80036ac <__sflush_r+0x1c>
 8003728:	6a21      	ldr	r1, [r4, #32]
 800372a:	2301      	movs	r3, #1
 800372c:	4628      	mov	r0, r5
 800372e:	47b0      	blx	r6
 8003730:	1c41      	adds	r1, r0, #1
 8003732:	d1c7      	bne.n	80036c4 <__sflush_r+0x34>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0c4      	beq.n	80036c4 <__sflush_r+0x34>
 800373a:	2b1d      	cmp	r3, #29
 800373c:	d001      	beq.n	8003742 <__sflush_r+0xb2>
 800373e:	2b16      	cmp	r3, #22
 8003740:	d101      	bne.n	8003746 <__sflush_r+0xb6>
 8003742:	602f      	str	r7, [r5, #0]
 8003744:	e7b1      	b.n	80036aa <__sflush_r+0x1a>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374c:	81a3      	strh	r3, [r4, #12]
 800374e:	e7ad      	b.n	80036ac <__sflush_r+0x1c>
 8003750:	690f      	ldr	r7, [r1, #16]
 8003752:	2f00      	cmp	r7, #0
 8003754:	d0a9      	beq.n	80036aa <__sflush_r+0x1a>
 8003756:	0793      	lsls	r3, r2, #30
 8003758:	680e      	ldr	r6, [r1, #0]
 800375a:	bf08      	it	eq
 800375c:	694b      	ldreq	r3, [r1, #20]
 800375e:	600f      	str	r7, [r1, #0]
 8003760:	bf18      	it	ne
 8003762:	2300      	movne	r3, #0
 8003764:	eba6 0807 	sub.w	r8, r6, r7
 8003768:	608b      	str	r3, [r1, #8]
 800376a:	f1b8 0f00 	cmp.w	r8, #0
 800376e:	dd9c      	ble.n	80036aa <__sflush_r+0x1a>
 8003770:	6a21      	ldr	r1, [r4, #32]
 8003772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003774:	4643      	mov	r3, r8
 8003776:	463a      	mov	r2, r7
 8003778:	4628      	mov	r0, r5
 800377a:	47b0      	blx	r6
 800377c:	2800      	cmp	r0, #0
 800377e:	dc06      	bgt.n	800378e <__sflush_r+0xfe>
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003786:	81a3      	strh	r3, [r4, #12]
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	e78e      	b.n	80036ac <__sflush_r+0x1c>
 800378e:	4407      	add	r7, r0
 8003790:	eba8 0800 	sub.w	r8, r8, r0
 8003794:	e7e9      	b.n	800376a <__sflush_r+0xda>
 8003796:	bf00      	nop
 8003798:	20400001 	.word	0x20400001

0800379c <_fflush_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	690b      	ldr	r3, [r1, #16]
 80037a0:	4605      	mov	r5, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	b913      	cbnz	r3, 80037ac <_fflush_r+0x10>
 80037a6:	2500      	movs	r5, #0
 80037a8:	4628      	mov	r0, r5
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	b118      	cbz	r0, 80037b6 <_fflush_r+0x1a>
 80037ae:	6983      	ldr	r3, [r0, #24]
 80037b0:	b90b      	cbnz	r3, 80037b6 <_fflush_r+0x1a>
 80037b2:	f000 f887 	bl	80038c4 <__sinit>
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <_fflush_r+0x6c>)
 80037b8:	429c      	cmp	r4, r3
 80037ba:	d11b      	bne.n	80037f4 <_fflush_r+0x58>
 80037bc:	686c      	ldr	r4, [r5, #4]
 80037be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ef      	beq.n	80037a6 <_fflush_r+0xa>
 80037c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037c8:	07d0      	lsls	r0, r2, #31
 80037ca:	d404      	bmi.n	80037d6 <_fflush_r+0x3a>
 80037cc:	0599      	lsls	r1, r3, #22
 80037ce:	d402      	bmi.n	80037d6 <_fflush_r+0x3a>
 80037d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037d2:	f000 f915 	bl	8003a00 <__retarget_lock_acquire_recursive>
 80037d6:	4628      	mov	r0, r5
 80037d8:	4621      	mov	r1, r4
 80037da:	f7ff ff59 	bl	8003690 <__sflush_r>
 80037de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037e0:	07da      	lsls	r2, r3, #31
 80037e2:	4605      	mov	r5, r0
 80037e4:	d4e0      	bmi.n	80037a8 <_fflush_r+0xc>
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	059b      	lsls	r3, r3, #22
 80037ea:	d4dd      	bmi.n	80037a8 <_fflush_r+0xc>
 80037ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ee:	f000 f908 	bl	8003a02 <__retarget_lock_release_recursive>
 80037f2:	e7d9      	b.n	80037a8 <_fflush_r+0xc>
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <_fflush_r+0x70>)
 80037f6:	429c      	cmp	r4, r3
 80037f8:	d101      	bne.n	80037fe <_fflush_r+0x62>
 80037fa:	68ac      	ldr	r4, [r5, #8]
 80037fc:	e7df      	b.n	80037be <_fflush_r+0x22>
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <_fflush_r+0x74>)
 8003800:	429c      	cmp	r4, r3
 8003802:	bf08      	it	eq
 8003804:	68ec      	ldreq	r4, [r5, #12]
 8003806:	e7da      	b.n	80037be <_fflush_r+0x22>
 8003808:	0800453c 	.word	0x0800453c
 800380c:	0800455c 	.word	0x0800455c
 8003810:	0800451c 	.word	0x0800451c

08003814 <std>:
 8003814:	2300      	movs	r3, #0
 8003816:	b510      	push	{r4, lr}
 8003818:	4604      	mov	r4, r0
 800381a:	e9c0 3300 	strd	r3, r3, [r0]
 800381e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003822:	6083      	str	r3, [r0, #8]
 8003824:	8181      	strh	r1, [r0, #12]
 8003826:	6643      	str	r3, [r0, #100]	; 0x64
 8003828:	81c2      	strh	r2, [r0, #14]
 800382a:	6183      	str	r3, [r0, #24]
 800382c:	4619      	mov	r1, r3
 800382e:	2208      	movs	r2, #8
 8003830:	305c      	adds	r0, #92	; 0x5c
 8003832:	f7ff fdd7 	bl	80033e4 <memset>
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <std+0x38>)
 8003838:	6263      	str	r3, [r4, #36]	; 0x24
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <std+0x3c>)
 800383c:	62a3      	str	r3, [r4, #40]	; 0x28
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <std+0x40>)
 8003840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <std+0x44>)
 8003844:	6224      	str	r4, [r4, #32]
 8003846:	6323      	str	r3, [r4, #48]	; 0x30
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	0800428d 	.word	0x0800428d
 8003850:	080042af 	.word	0x080042af
 8003854:	080042e7 	.word	0x080042e7
 8003858:	0800430b 	.word	0x0800430b

0800385c <_cleanup_r>:
 800385c:	4901      	ldr	r1, [pc, #4]	; (8003864 <_cleanup_r+0x8>)
 800385e:	f000 b8af 	b.w	80039c0 <_fwalk_reent>
 8003862:	bf00      	nop
 8003864:	0800379d 	.word	0x0800379d

08003868 <__sfmoreglue>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	2268      	movs	r2, #104	; 0x68
 800386c:	1e4d      	subs	r5, r1, #1
 800386e:	4355      	muls	r5, r2
 8003870:	460e      	mov	r6, r1
 8003872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003876:	f000 f997 	bl	8003ba8 <_malloc_r>
 800387a:	4604      	mov	r4, r0
 800387c:	b140      	cbz	r0, 8003890 <__sfmoreglue+0x28>
 800387e:	2100      	movs	r1, #0
 8003880:	e9c0 1600 	strd	r1, r6, [r0]
 8003884:	300c      	adds	r0, #12
 8003886:	60a0      	str	r0, [r4, #8]
 8003888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800388c:	f7ff fdaa 	bl	80033e4 <memset>
 8003890:	4620      	mov	r0, r4
 8003892:	bd70      	pop	{r4, r5, r6, pc}

08003894 <__sfp_lock_acquire>:
 8003894:	4801      	ldr	r0, [pc, #4]	; (800389c <__sfp_lock_acquire+0x8>)
 8003896:	f000 b8b3 	b.w	8003a00 <__retarget_lock_acquire_recursive>
 800389a:	bf00      	nop
 800389c:	2000012d 	.word	0x2000012d

080038a0 <__sfp_lock_release>:
 80038a0:	4801      	ldr	r0, [pc, #4]	; (80038a8 <__sfp_lock_release+0x8>)
 80038a2:	f000 b8ae 	b.w	8003a02 <__retarget_lock_release_recursive>
 80038a6:	bf00      	nop
 80038a8:	2000012d 	.word	0x2000012d

080038ac <__sinit_lock_acquire>:
 80038ac:	4801      	ldr	r0, [pc, #4]	; (80038b4 <__sinit_lock_acquire+0x8>)
 80038ae:	f000 b8a7 	b.w	8003a00 <__retarget_lock_acquire_recursive>
 80038b2:	bf00      	nop
 80038b4:	2000012e 	.word	0x2000012e

080038b8 <__sinit_lock_release>:
 80038b8:	4801      	ldr	r0, [pc, #4]	; (80038c0 <__sinit_lock_release+0x8>)
 80038ba:	f000 b8a2 	b.w	8003a02 <__retarget_lock_release_recursive>
 80038be:	bf00      	nop
 80038c0:	2000012e 	.word	0x2000012e

080038c4 <__sinit>:
 80038c4:	b510      	push	{r4, lr}
 80038c6:	4604      	mov	r4, r0
 80038c8:	f7ff fff0 	bl	80038ac <__sinit_lock_acquire>
 80038cc:	69a3      	ldr	r3, [r4, #24]
 80038ce:	b11b      	cbz	r3, 80038d8 <__sinit+0x14>
 80038d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d4:	f7ff bff0 	b.w	80038b8 <__sinit_lock_release>
 80038d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038dc:	6523      	str	r3, [r4, #80]	; 0x50
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <__sinit+0x68>)
 80038e0:	4a13      	ldr	r2, [pc, #76]	; (8003930 <__sinit+0x6c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80038e6:	42a3      	cmp	r3, r4
 80038e8:	bf04      	itt	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	61a3      	streq	r3, [r4, #24]
 80038ee:	4620      	mov	r0, r4
 80038f0:	f000 f820 	bl	8003934 <__sfp>
 80038f4:	6060      	str	r0, [r4, #4]
 80038f6:	4620      	mov	r0, r4
 80038f8:	f000 f81c 	bl	8003934 <__sfp>
 80038fc:	60a0      	str	r0, [r4, #8]
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 f818 	bl	8003934 <__sfp>
 8003904:	2200      	movs	r2, #0
 8003906:	60e0      	str	r0, [r4, #12]
 8003908:	2104      	movs	r1, #4
 800390a:	6860      	ldr	r0, [r4, #4]
 800390c:	f7ff ff82 	bl	8003814 <std>
 8003910:	68a0      	ldr	r0, [r4, #8]
 8003912:	2201      	movs	r2, #1
 8003914:	2109      	movs	r1, #9
 8003916:	f7ff ff7d 	bl	8003814 <std>
 800391a:	68e0      	ldr	r0, [r4, #12]
 800391c:	2202      	movs	r2, #2
 800391e:	2112      	movs	r1, #18
 8003920:	f7ff ff78 	bl	8003814 <std>
 8003924:	2301      	movs	r3, #1
 8003926:	61a3      	str	r3, [r4, #24]
 8003928:	e7d2      	b.n	80038d0 <__sinit+0xc>
 800392a:	bf00      	nop
 800392c:	08004518 	.word	0x08004518
 8003930:	0800385d 	.word	0x0800385d

08003934 <__sfp>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	4607      	mov	r7, r0
 8003938:	f7ff ffac 	bl	8003894 <__sfp_lock_acquire>
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <__sfp+0x84>)
 800393e:	681e      	ldr	r6, [r3, #0]
 8003940:	69b3      	ldr	r3, [r6, #24]
 8003942:	b913      	cbnz	r3, 800394a <__sfp+0x16>
 8003944:	4630      	mov	r0, r6
 8003946:	f7ff ffbd 	bl	80038c4 <__sinit>
 800394a:	3648      	adds	r6, #72	; 0x48
 800394c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003950:	3b01      	subs	r3, #1
 8003952:	d503      	bpl.n	800395c <__sfp+0x28>
 8003954:	6833      	ldr	r3, [r6, #0]
 8003956:	b30b      	cbz	r3, 800399c <__sfp+0x68>
 8003958:	6836      	ldr	r6, [r6, #0]
 800395a:	e7f7      	b.n	800394c <__sfp+0x18>
 800395c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003960:	b9d5      	cbnz	r5, 8003998 <__sfp+0x64>
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <__sfp+0x88>)
 8003964:	60e3      	str	r3, [r4, #12]
 8003966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800396a:	6665      	str	r5, [r4, #100]	; 0x64
 800396c:	f000 f847 	bl	80039fe <__retarget_lock_init_recursive>
 8003970:	f7ff ff96 	bl	80038a0 <__sfp_lock_release>
 8003974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800397c:	6025      	str	r5, [r4, #0]
 800397e:	61a5      	str	r5, [r4, #24]
 8003980:	2208      	movs	r2, #8
 8003982:	4629      	mov	r1, r5
 8003984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003988:	f7ff fd2c 	bl	80033e4 <memset>
 800398c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003994:	4620      	mov	r0, r4
 8003996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003998:	3468      	adds	r4, #104	; 0x68
 800399a:	e7d9      	b.n	8003950 <__sfp+0x1c>
 800399c:	2104      	movs	r1, #4
 800399e:	4638      	mov	r0, r7
 80039a0:	f7ff ff62 	bl	8003868 <__sfmoreglue>
 80039a4:	4604      	mov	r4, r0
 80039a6:	6030      	str	r0, [r6, #0]
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d1d5      	bne.n	8003958 <__sfp+0x24>
 80039ac:	f7ff ff78 	bl	80038a0 <__sfp_lock_release>
 80039b0:	230c      	movs	r3, #12
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	e7ee      	b.n	8003994 <__sfp+0x60>
 80039b6:	bf00      	nop
 80039b8:	08004518 	.word	0x08004518
 80039bc:	ffff0001 	.word	0xffff0001

080039c0 <_fwalk_reent>:
 80039c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c4:	4606      	mov	r6, r0
 80039c6:	4688      	mov	r8, r1
 80039c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039cc:	2700      	movs	r7, #0
 80039ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039d2:	f1b9 0901 	subs.w	r9, r9, #1
 80039d6:	d505      	bpl.n	80039e4 <_fwalk_reent+0x24>
 80039d8:	6824      	ldr	r4, [r4, #0]
 80039da:	2c00      	cmp	r4, #0
 80039dc:	d1f7      	bne.n	80039ce <_fwalk_reent+0xe>
 80039de:	4638      	mov	r0, r7
 80039e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039e4:	89ab      	ldrh	r3, [r5, #12]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d907      	bls.n	80039fa <_fwalk_reent+0x3a>
 80039ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039ee:	3301      	adds	r3, #1
 80039f0:	d003      	beq.n	80039fa <_fwalk_reent+0x3a>
 80039f2:	4629      	mov	r1, r5
 80039f4:	4630      	mov	r0, r6
 80039f6:	47c0      	blx	r8
 80039f8:	4307      	orrs	r7, r0
 80039fa:	3568      	adds	r5, #104	; 0x68
 80039fc:	e7e9      	b.n	80039d2 <_fwalk_reent+0x12>

080039fe <__retarget_lock_init_recursive>:
 80039fe:	4770      	bx	lr

08003a00 <__retarget_lock_acquire_recursive>:
 8003a00:	4770      	bx	lr

08003a02 <__retarget_lock_release_recursive>:
 8003a02:	4770      	bx	lr

08003a04 <__swhatbuf_r>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	460e      	mov	r6, r1
 8003a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a0c:	2900      	cmp	r1, #0
 8003a0e:	b096      	sub	sp, #88	; 0x58
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	da08      	bge.n	8003a28 <__swhatbuf_r+0x24>
 8003a16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	602a      	str	r2, [r5, #0]
 8003a1e:	061a      	lsls	r2, r3, #24
 8003a20:	d410      	bmi.n	8003a44 <__swhatbuf_r+0x40>
 8003a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a26:	e00e      	b.n	8003a46 <__swhatbuf_r+0x42>
 8003a28:	466a      	mov	r2, sp
 8003a2a:	f000 fc95 	bl	8004358 <_fstat_r>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	dbf1      	blt.n	8003a16 <__swhatbuf_r+0x12>
 8003a32:	9a01      	ldr	r2, [sp, #4]
 8003a34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a3c:	425a      	negs	r2, r3
 8003a3e:	415a      	adcs	r2, r3
 8003a40:	602a      	str	r2, [r5, #0]
 8003a42:	e7ee      	b.n	8003a22 <__swhatbuf_r+0x1e>
 8003a44:	2340      	movs	r3, #64	; 0x40
 8003a46:	2000      	movs	r0, #0
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	b016      	add	sp, #88	; 0x58
 8003a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a50 <__smakebuf_r>:
 8003a50:	898b      	ldrh	r3, [r1, #12]
 8003a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a54:	079d      	lsls	r5, r3, #30
 8003a56:	4606      	mov	r6, r0
 8003a58:	460c      	mov	r4, r1
 8003a5a:	d507      	bpl.n	8003a6c <__smakebuf_r+0x1c>
 8003a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	2301      	movs	r3, #1
 8003a66:	6163      	str	r3, [r4, #20]
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	ab01      	add	r3, sp, #4
 8003a6e:	466a      	mov	r2, sp
 8003a70:	f7ff ffc8 	bl	8003a04 <__swhatbuf_r>
 8003a74:	9900      	ldr	r1, [sp, #0]
 8003a76:	4605      	mov	r5, r0
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f000 f895 	bl	8003ba8 <_malloc_r>
 8003a7e:	b948      	cbnz	r0, 8003a94 <__smakebuf_r+0x44>
 8003a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a84:	059a      	lsls	r2, r3, #22
 8003a86:	d4ef      	bmi.n	8003a68 <__smakebuf_r+0x18>
 8003a88:	f023 0303 	bic.w	r3, r3, #3
 8003a8c:	f043 0302 	orr.w	r3, r3, #2
 8003a90:	81a3      	strh	r3, [r4, #12]
 8003a92:	e7e3      	b.n	8003a5c <__smakebuf_r+0xc>
 8003a94:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <__smakebuf_r+0x7c>)
 8003a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	6020      	str	r0, [r4, #0]
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	9b00      	ldr	r3, [sp, #0]
 8003aa4:	6163      	str	r3, [r4, #20]
 8003aa6:	9b01      	ldr	r3, [sp, #4]
 8003aa8:	6120      	str	r0, [r4, #16]
 8003aaa:	b15b      	cbz	r3, 8003ac4 <__smakebuf_r+0x74>
 8003aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	f000 fc63 	bl	800437c <_isatty_r>
 8003ab6:	b128      	cbz	r0, 8003ac4 <__smakebuf_r+0x74>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	89a0      	ldrh	r0, [r4, #12]
 8003ac6:	4305      	orrs	r5, r0
 8003ac8:	81a5      	strh	r5, [r4, #12]
 8003aca:	e7cd      	b.n	8003a68 <__smakebuf_r+0x18>
 8003acc:	0800385d 	.word	0x0800385d

08003ad0 <_free_r>:
 8003ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ad2:	2900      	cmp	r1, #0
 8003ad4:	d044      	beq.n	8003b60 <_free_r+0x90>
 8003ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ada:	9001      	str	r0, [sp, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f1a1 0404 	sub.w	r4, r1, #4
 8003ae2:	bfb8      	it	lt
 8003ae4:	18e4      	addlt	r4, r4, r3
 8003ae6:	f000 fc6b 	bl	80043c0 <__malloc_lock>
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <_free_r+0x94>)
 8003aec:	9801      	ldr	r0, [sp, #4]
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	b933      	cbnz	r3, 8003b00 <_free_r+0x30>
 8003af2:	6063      	str	r3, [r4, #4]
 8003af4:	6014      	str	r4, [r2, #0]
 8003af6:	b003      	add	sp, #12
 8003af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003afc:	f000 bc66 	b.w	80043cc <__malloc_unlock>
 8003b00:	42a3      	cmp	r3, r4
 8003b02:	d908      	bls.n	8003b16 <_free_r+0x46>
 8003b04:	6825      	ldr	r5, [r4, #0]
 8003b06:	1961      	adds	r1, r4, r5
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	bf01      	itttt	eq
 8003b0c:	6819      	ldreq	r1, [r3, #0]
 8003b0e:	685b      	ldreq	r3, [r3, #4]
 8003b10:	1949      	addeq	r1, r1, r5
 8003b12:	6021      	streq	r1, [r4, #0]
 8003b14:	e7ed      	b.n	8003af2 <_free_r+0x22>
 8003b16:	461a      	mov	r2, r3
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	b10b      	cbz	r3, 8003b20 <_free_r+0x50>
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	d9fa      	bls.n	8003b16 <_free_r+0x46>
 8003b20:	6811      	ldr	r1, [r2, #0]
 8003b22:	1855      	adds	r5, r2, r1
 8003b24:	42a5      	cmp	r5, r4
 8003b26:	d10b      	bne.n	8003b40 <_free_r+0x70>
 8003b28:	6824      	ldr	r4, [r4, #0]
 8003b2a:	4421      	add	r1, r4
 8003b2c:	1854      	adds	r4, r2, r1
 8003b2e:	42a3      	cmp	r3, r4
 8003b30:	6011      	str	r1, [r2, #0]
 8003b32:	d1e0      	bne.n	8003af6 <_free_r+0x26>
 8003b34:	681c      	ldr	r4, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	6053      	str	r3, [r2, #4]
 8003b3a:	4421      	add	r1, r4
 8003b3c:	6011      	str	r1, [r2, #0]
 8003b3e:	e7da      	b.n	8003af6 <_free_r+0x26>
 8003b40:	d902      	bls.n	8003b48 <_free_r+0x78>
 8003b42:	230c      	movs	r3, #12
 8003b44:	6003      	str	r3, [r0, #0]
 8003b46:	e7d6      	b.n	8003af6 <_free_r+0x26>
 8003b48:	6825      	ldr	r5, [r4, #0]
 8003b4a:	1961      	adds	r1, r4, r5
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	bf04      	itt	eq
 8003b50:	6819      	ldreq	r1, [r3, #0]
 8003b52:	685b      	ldreq	r3, [r3, #4]
 8003b54:	6063      	str	r3, [r4, #4]
 8003b56:	bf04      	itt	eq
 8003b58:	1949      	addeq	r1, r1, r5
 8003b5a:	6021      	streq	r1, [r4, #0]
 8003b5c:	6054      	str	r4, [r2, #4]
 8003b5e:	e7ca      	b.n	8003af6 <_free_r+0x26>
 8003b60:	b003      	add	sp, #12
 8003b62:	bd30      	pop	{r4, r5, pc}
 8003b64:	20000130 	.word	0x20000130

08003b68 <sbrk_aligned>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4e0e      	ldr	r6, [pc, #56]	; (8003ba4 <sbrk_aligned+0x3c>)
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	6831      	ldr	r1, [r6, #0]
 8003b70:	4605      	mov	r5, r0
 8003b72:	b911      	cbnz	r1, 8003b7a <sbrk_aligned+0x12>
 8003b74:	f000 fb7a 	bl	800426c <_sbrk_r>
 8003b78:	6030      	str	r0, [r6, #0]
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f000 fb75 	bl	800426c <_sbrk_r>
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	d00a      	beq.n	8003b9c <sbrk_aligned+0x34>
 8003b86:	1cc4      	adds	r4, r0, #3
 8003b88:	f024 0403 	bic.w	r4, r4, #3
 8003b8c:	42a0      	cmp	r0, r4
 8003b8e:	d007      	beq.n	8003ba0 <sbrk_aligned+0x38>
 8003b90:	1a21      	subs	r1, r4, r0
 8003b92:	4628      	mov	r0, r5
 8003b94:	f000 fb6a 	bl	800426c <_sbrk_r>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d101      	bne.n	8003ba0 <sbrk_aligned+0x38>
 8003b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}
 8003ba4:	20000134 	.word	0x20000134

08003ba8 <_malloc_r>:
 8003ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bac:	1ccd      	adds	r5, r1, #3
 8003bae:	f025 0503 	bic.w	r5, r5, #3
 8003bb2:	3508      	adds	r5, #8
 8003bb4:	2d0c      	cmp	r5, #12
 8003bb6:	bf38      	it	cc
 8003bb8:	250c      	movcc	r5, #12
 8003bba:	2d00      	cmp	r5, #0
 8003bbc:	4607      	mov	r7, r0
 8003bbe:	db01      	blt.n	8003bc4 <_malloc_r+0x1c>
 8003bc0:	42a9      	cmp	r1, r5
 8003bc2:	d905      	bls.n	8003bd0 <_malloc_r+0x28>
 8003bc4:	230c      	movs	r3, #12
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	2600      	movs	r6, #0
 8003bca:	4630      	mov	r0, r6
 8003bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd0:	4e2e      	ldr	r6, [pc, #184]	; (8003c8c <_malloc_r+0xe4>)
 8003bd2:	f000 fbf5 	bl	80043c0 <__malloc_lock>
 8003bd6:	6833      	ldr	r3, [r6, #0]
 8003bd8:	461c      	mov	r4, r3
 8003bda:	bb34      	cbnz	r4, 8003c2a <_malloc_r+0x82>
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4638      	mov	r0, r7
 8003be0:	f7ff ffc2 	bl	8003b68 <sbrk_aligned>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	4604      	mov	r4, r0
 8003be8:	d14d      	bne.n	8003c86 <_malloc_r+0xde>
 8003bea:	6834      	ldr	r4, [r6, #0]
 8003bec:	4626      	mov	r6, r4
 8003bee:	2e00      	cmp	r6, #0
 8003bf0:	d140      	bne.n	8003c74 <_malloc_r+0xcc>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	4631      	mov	r1, r6
 8003bf6:	4638      	mov	r0, r7
 8003bf8:	eb04 0803 	add.w	r8, r4, r3
 8003bfc:	f000 fb36 	bl	800426c <_sbrk_r>
 8003c00:	4580      	cmp	r8, r0
 8003c02:	d13a      	bne.n	8003c7a <_malloc_r+0xd2>
 8003c04:	6821      	ldr	r1, [r4, #0]
 8003c06:	3503      	adds	r5, #3
 8003c08:	1a6d      	subs	r5, r5, r1
 8003c0a:	f025 0503 	bic.w	r5, r5, #3
 8003c0e:	3508      	adds	r5, #8
 8003c10:	2d0c      	cmp	r5, #12
 8003c12:	bf38      	it	cc
 8003c14:	250c      	movcc	r5, #12
 8003c16:	4629      	mov	r1, r5
 8003c18:	4638      	mov	r0, r7
 8003c1a:	f7ff ffa5 	bl	8003b68 <sbrk_aligned>
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d02b      	beq.n	8003c7a <_malloc_r+0xd2>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	442b      	add	r3, r5
 8003c26:	6023      	str	r3, [r4, #0]
 8003c28:	e00e      	b.n	8003c48 <_malloc_r+0xa0>
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	1b52      	subs	r2, r2, r5
 8003c2e:	d41e      	bmi.n	8003c6e <_malloc_r+0xc6>
 8003c30:	2a0b      	cmp	r2, #11
 8003c32:	d916      	bls.n	8003c62 <_malloc_r+0xba>
 8003c34:	1961      	adds	r1, r4, r5
 8003c36:	42a3      	cmp	r3, r4
 8003c38:	6025      	str	r5, [r4, #0]
 8003c3a:	bf18      	it	ne
 8003c3c:	6059      	strne	r1, [r3, #4]
 8003c3e:	6863      	ldr	r3, [r4, #4]
 8003c40:	bf08      	it	eq
 8003c42:	6031      	streq	r1, [r6, #0]
 8003c44:	5162      	str	r2, [r4, r5]
 8003c46:	604b      	str	r3, [r1, #4]
 8003c48:	4638      	mov	r0, r7
 8003c4a:	f104 060b 	add.w	r6, r4, #11
 8003c4e:	f000 fbbd 	bl	80043cc <__malloc_unlock>
 8003c52:	f026 0607 	bic.w	r6, r6, #7
 8003c56:	1d23      	adds	r3, r4, #4
 8003c58:	1af2      	subs	r2, r6, r3
 8003c5a:	d0b6      	beq.n	8003bca <_malloc_r+0x22>
 8003c5c:	1b9b      	subs	r3, r3, r6
 8003c5e:	50a3      	str	r3, [r4, r2]
 8003c60:	e7b3      	b.n	8003bca <_malloc_r+0x22>
 8003c62:	6862      	ldr	r2, [r4, #4]
 8003c64:	42a3      	cmp	r3, r4
 8003c66:	bf0c      	ite	eq
 8003c68:	6032      	streq	r2, [r6, #0]
 8003c6a:	605a      	strne	r2, [r3, #4]
 8003c6c:	e7ec      	b.n	8003c48 <_malloc_r+0xa0>
 8003c6e:	4623      	mov	r3, r4
 8003c70:	6864      	ldr	r4, [r4, #4]
 8003c72:	e7b2      	b.n	8003bda <_malloc_r+0x32>
 8003c74:	4634      	mov	r4, r6
 8003c76:	6876      	ldr	r6, [r6, #4]
 8003c78:	e7b9      	b.n	8003bee <_malloc_r+0x46>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4638      	mov	r0, r7
 8003c80:	f000 fba4 	bl	80043cc <__malloc_unlock>
 8003c84:	e7a1      	b.n	8003bca <_malloc_r+0x22>
 8003c86:	6025      	str	r5, [r4, #0]
 8003c88:	e7de      	b.n	8003c48 <_malloc_r+0xa0>
 8003c8a:	bf00      	nop
 8003c8c:	20000130 	.word	0x20000130

08003c90 <__sfputc_r>:
 8003c90:	6893      	ldr	r3, [r2, #8]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	b410      	push	{r4}
 8003c98:	6093      	str	r3, [r2, #8]
 8003c9a:	da08      	bge.n	8003cae <__sfputc_r+0x1e>
 8003c9c:	6994      	ldr	r4, [r2, #24]
 8003c9e:	42a3      	cmp	r3, r4
 8003ca0:	db01      	blt.n	8003ca6 <__sfputc_r+0x16>
 8003ca2:	290a      	cmp	r1, #10
 8003ca4:	d103      	bne.n	8003cae <__sfputc_r+0x1e>
 8003ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003caa:	f7ff bc31 	b.w	8003510 <__swbuf_r>
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	1c58      	adds	r0, r3, #1
 8003cb2:	6010      	str	r0, [r2, #0]
 8003cb4:	7019      	strb	r1, [r3, #0]
 8003cb6:	4608      	mov	r0, r1
 8003cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <__sfputs_r>:
 8003cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc0:	4606      	mov	r6, r0
 8003cc2:	460f      	mov	r7, r1
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	18d5      	adds	r5, r2, r3
 8003cc8:	42ac      	cmp	r4, r5
 8003cca:	d101      	bne.n	8003cd0 <__sfputs_r+0x12>
 8003ccc:	2000      	movs	r0, #0
 8003cce:	e007      	b.n	8003ce0 <__sfputs_r+0x22>
 8003cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd4:	463a      	mov	r2, r7
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f7ff ffda 	bl	8003c90 <__sfputc_r>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d1f3      	bne.n	8003cc8 <__sfputs_r+0xa>
 8003ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ce4 <_vfiprintf_r>:
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	460d      	mov	r5, r1
 8003cea:	b09d      	sub	sp, #116	; 0x74
 8003cec:	4614      	mov	r4, r2
 8003cee:	4698      	mov	r8, r3
 8003cf0:	4606      	mov	r6, r0
 8003cf2:	b118      	cbz	r0, 8003cfc <_vfiprintf_r+0x18>
 8003cf4:	6983      	ldr	r3, [r0, #24]
 8003cf6:	b90b      	cbnz	r3, 8003cfc <_vfiprintf_r+0x18>
 8003cf8:	f7ff fde4 	bl	80038c4 <__sinit>
 8003cfc:	4b89      	ldr	r3, [pc, #548]	; (8003f24 <_vfiprintf_r+0x240>)
 8003cfe:	429d      	cmp	r5, r3
 8003d00:	d11b      	bne.n	8003d3a <_vfiprintf_r+0x56>
 8003d02:	6875      	ldr	r5, [r6, #4]
 8003d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d06:	07d9      	lsls	r1, r3, #31
 8003d08:	d405      	bmi.n	8003d16 <_vfiprintf_r+0x32>
 8003d0a:	89ab      	ldrh	r3, [r5, #12]
 8003d0c:	059a      	lsls	r2, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_vfiprintf_r+0x32>
 8003d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d12:	f7ff fe75 	bl	8003a00 <__retarget_lock_acquire_recursive>
 8003d16:	89ab      	ldrh	r3, [r5, #12]
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	d501      	bpl.n	8003d20 <_vfiprintf_r+0x3c>
 8003d1c:	692b      	ldr	r3, [r5, #16]
 8003d1e:	b9eb      	cbnz	r3, 8003d5c <_vfiprintf_r+0x78>
 8003d20:	4629      	mov	r1, r5
 8003d22:	4630      	mov	r0, r6
 8003d24:	f7ff fc46 	bl	80035b4 <__swsetup_r>
 8003d28:	b1c0      	cbz	r0, 8003d5c <_vfiprintf_r+0x78>
 8003d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d2c:	07dc      	lsls	r4, r3, #31
 8003d2e:	d50e      	bpl.n	8003d4e <_vfiprintf_r+0x6a>
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	b01d      	add	sp, #116	; 0x74
 8003d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	; (8003f28 <_vfiprintf_r+0x244>)
 8003d3c:	429d      	cmp	r5, r3
 8003d3e:	d101      	bne.n	8003d44 <_vfiprintf_r+0x60>
 8003d40:	68b5      	ldr	r5, [r6, #8]
 8003d42:	e7df      	b.n	8003d04 <_vfiprintf_r+0x20>
 8003d44:	4b79      	ldr	r3, [pc, #484]	; (8003f2c <_vfiprintf_r+0x248>)
 8003d46:	429d      	cmp	r5, r3
 8003d48:	bf08      	it	eq
 8003d4a:	68f5      	ldreq	r5, [r6, #12]
 8003d4c:	e7da      	b.n	8003d04 <_vfiprintf_r+0x20>
 8003d4e:	89ab      	ldrh	r3, [r5, #12]
 8003d50:	0598      	lsls	r0, r3, #22
 8003d52:	d4ed      	bmi.n	8003d30 <_vfiprintf_r+0x4c>
 8003d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d56:	f7ff fe54 	bl	8003a02 <__retarget_lock_release_recursive>
 8003d5a:	e7e9      	b.n	8003d30 <_vfiprintf_r+0x4c>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d60:	2320      	movs	r3, #32
 8003d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d6a:	2330      	movs	r3, #48	; 0x30
 8003d6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f30 <_vfiprintf_r+0x24c>
 8003d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d74:	f04f 0901 	mov.w	r9, #1
 8003d78:	4623      	mov	r3, r4
 8003d7a:	469a      	mov	sl, r3
 8003d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d80:	b10a      	cbz	r2, 8003d86 <_vfiprintf_r+0xa2>
 8003d82:	2a25      	cmp	r2, #37	; 0x25
 8003d84:	d1f9      	bne.n	8003d7a <_vfiprintf_r+0x96>
 8003d86:	ebba 0b04 	subs.w	fp, sl, r4
 8003d8a:	d00b      	beq.n	8003da4 <_vfiprintf_r+0xc0>
 8003d8c:	465b      	mov	r3, fp
 8003d8e:	4622      	mov	r2, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	4630      	mov	r0, r6
 8003d94:	f7ff ff93 	bl	8003cbe <__sfputs_r>
 8003d98:	3001      	adds	r0, #1
 8003d9a:	f000 80aa 	beq.w	8003ef2 <_vfiprintf_r+0x20e>
 8003d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003da0:	445a      	add	r2, fp
 8003da2:	9209      	str	r2, [sp, #36]	; 0x24
 8003da4:	f89a 3000 	ldrb.w	r3, [sl]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a2 	beq.w	8003ef2 <_vfiprintf_r+0x20e>
 8003dae:	2300      	movs	r3, #0
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295
 8003db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003db8:	f10a 0a01 	add.w	sl, sl, #1
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	9307      	str	r3, [sp, #28]
 8003dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8003dc6:	4654      	mov	r4, sl
 8003dc8:	2205      	movs	r2, #5
 8003dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dce:	4858      	ldr	r0, [pc, #352]	; (8003f30 <_vfiprintf_r+0x24c>)
 8003dd0:	f7fc fa06 	bl	80001e0 <memchr>
 8003dd4:	9a04      	ldr	r2, [sp, #16]
 8003dd6:	b9d8      	cbnz	r0, 8003e10 <_vfiprintf_r+0x12c>
 8003dd8:	06d1      	lsls	r1, r2, #27
 8003dda:	bf44      	itt	mi
 8003ddc:	2320      	movmi	r3, #32
 8003dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003de2:	0713      	lsls	r3, r2, #28
 8003de4:	bf44      	itt	mi
 8003de6:	232b      	movmi	r3, #43	; 0x2b
 8003de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dec:	f89a 3000 	ldrb.w	r3, [sl]
 8003df0:	2b2a      	cmp	r3, #42	; 0x2a
 8003df2:	d015      	beq.n	8003e20 <_vfiprintf_r+0x13c>
 8003df4:	9a07      	ldr	r2, [sp, #28]
 8003df6:	4654      	mov	r4, sl
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f04f 0c0a 	mov.w	ip, #10
 8003dfe:	4621      	mov	r1, r4
 8003e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e04:	3b30      	subs	r3, #48	; 0x30
 8003e06:	2b09      	cmp	r3, #9
 8003e08:	d94e      	bls.n	8003ea8 <_vfiprintf_r+0x1c4>
 8003e0a:	b1b0      	cbz	r0, 8003e3a <_vfiprintf_r+0x156>
 8003e0c:	9207      	str	r2, [sp, #28]
 8003e0e:	e014      	b.n	8003e3a <_vfiprintf_r+0x156>
 8003e10:	eba0 0308 	sub.w	r3, r0, r8
 8003e14:	fa09 f303 	lsl.w	r3, r9, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	46a2      	mov	sl, r4
 8003e1e:	e7d2      	b.n	8003dc6 <_vfiprintf_r+0xe2>
 8003e20:	9b03      	ldr	r3, [sp, #12]
 8003e22:	1d19      	adds	r1, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	9103      	str	r1, [sp, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bfbb      	ittet	lt
 8003e2c:	425b      	neglt	r3, r3
 8003e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e32:	9307      	strge	r3, [sp, #28]
 8003e34:	9307      	strlt	r3, [sp, #28]
 8003e36:	bfb8      	it	lt
 8003e38:	9204      	strlt	r2, [sp, #16]
 8003e3a:	7823      	ldrb	r3, [r4, #0]
 8003e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e3e:	d10c      	bne.n	8003e5a <_vfiprintf_r+0x176>
 8003e40:	7863      	ldrb	r3, [r4, #1]
 8003e42:	2b2a      	cmp	r3, #42	; 0x2a
 8003e44:	d135      	bne.n	8003eb2 <_vfiprintf_r+0x1ce>
 8003e46:	9b03      	ldr	r3, [sp, #12]
 8003e48:	1d1a      	adds	r2, r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	9203      	str	r2, [sp, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bfb8      	it	lt
 8003e52:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e56:	3402      	adds	r4, #2
 8003e58:	9305      	str	r3, [sp, #20]
 8003e5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f40 <_vfiprintf_r+0x25c>
 8003e5e:	7821      	ldrb	r1, [r4, #0]
 8003e60:	2203      	movs	r2, #3
 8003e62:	4650      	mov	r0, sl
 8003e64:	f7fc f9bc 	bl	80001e0 <memchr>
 8003e68:	b140      	cbz	r0, 8003e7c <_vfiprintf_r+0x198>
 8003e6a:	2340      	movs	r3, #64	; 0x40
 8003e6c:	eba0 000a 	sub.w	r0, r0, sl
 8003e70:	fa03 f000 	lsl.w	r0, r3, r0
 8003e74:	9b04      	ldr	r3, [sp, #16]
 8003e76:	4303      	orrs	r3, r0
 8003e78:	3401      	adds	r4, #1
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e80:	482c      	ldr	r0, [pc, #176]	; (8003f34 <_vfiprintf_r+0x250>)
 8003e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e86:	2206      	movs	r2, #6
 8003e88:	f7fc f9aa 	bl	80001e0 <memchr>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d03f      	beq.n	8003f10 <_vfiprintf_r+0x22c>
 8003e90:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <_vfiprintf_r+0x254>)
 8003e92:	bb1b      	cbnz	r3, 8003edc <_vfiprintf_r+0x1f8>
 8003e94:	9b03      	ldr	r3, [sp, #12]
 8003e96:	3307      	adds	r3, #7
 8003e98:	f023 0307 	bic.w	r3, r3, #7
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea2:	443b      	add	r3, r7
 8003ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea6:	e767      	b.n	8003d78 <_vfiprintf_r+0x94>
 8003ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eac:	460c      	mov	r4, r1
 8003eae:	2001      	movs	r0, #1
 8003eb0:	e7a5      	b.n	8003dfe <_vfiprintf_r+0x11a>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	3401      	adds	r4, #1
 8003eb6:	9305      	str	r3, [sp, #20]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f04f 0c0a 	mov.w	ip, #10
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec4:	3a30      	subs	r2, #48	; 0x30
 8003ec6:	2a09      	cmp	r2, #9
 8003ec8:	d903      	bls.n	8003ed2 <_vfiprintf_r+0x1ee>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0c5      	beq.n	8003e5a <_vfiprintf_r+0x176>
 8003ece:	9105      	str	r1, [sp, #20]
 8003ed0:	e7c3      	b.n	8003e5a <_vfiprintf_r+0x176>
 8003ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e7f0      	b.n	8003ebe <_vfiprintf_r+0x1da>
 8003edc:	ab03      	add	r3, sp, #12
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <_vfiprintf_r+0x258>)
 8003ee4:	a904      	add	r1, sp, #16
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f3af 8000 	nop.w
 8003eec:	4607      	mov	r7, r0
 8003eee:	1c78      	adds	r0, r7, #1
 8003ef0:	d1d6      	bne.n	8003ea0 <_vfiprintf_r+0x1bc>
 8003ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ef4:	07d9      	lsls	r1, r3, #31
 8003ef6:	d405      	bmi.n	8003f04 <_vfiprintf_r+0x220>
 8003ef8:	89ab      	ldrh	r3, [r5, #12]
 8003efa:	059a      	lsls	r2, r3, #22
 8003efc:	d402      	bmi.n	8003f04 <_vfiprintf_r+0x220>
 8003efe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f00:	f7ff fd7f 	bl	8003a02 <__retarget_lock_release_recursive>
 8003f04:	89ab      	ldrh	r3, [r5, #12]
 8003f06:	065b      	lsls	r3, r3, #25
 8003f08:	f53f af12 	bmi.w	8003d30 <_vfiprintf_r+0x4c>
 8003f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f0e:	e711      	b.n	8003d34 <_vfiprintf_r+0x50>
 8003f10:	ab03      	add	r3, sp, #12
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	462a      	mov	r2, r5
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <_vfiprintf_r+0x258>)
 8003f18:	a904      	add	r1, sp, #16
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 f880 	bl	8004020 <_printf_i>
 8003f20:	e7e4      	b.n	8003eec <_vfiprintf_r+0x208>
 8003f22:	bf00      	nop
 8003f24:	0800453c 	.word	0x0800453c
 8003f28:	0800455c 	.word	0x0800455c
 8003f2c:	0800451c 	.word	0x0800451c
 8003f30:	0800457c 	.word	0x0800457c
 8003f34:	08004586 	.word	0x08004586
 8003f38:	00000000 	.word	0x00000000
 8003f3c:	08003cbf 	.word	0x08003cbf
 8003f40:	08004582 	.word	0x08004582

08003f44 <_printf_common>:
 8003f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	4616      	mov	r6, r2
 8003f4a:	4699      	mov	r9, r3
 8003f4c:	688a      	ldr	r2, [r1, #8]
 8003f4e:	690b      	ldr	r3, [r1, #16]
 8003f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bfb8      	it	lt
 8003f58:	4613      	movlt	r3, r2
 8003f5a:	6033      	str	r3, [r6, #0]
 8003f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f60:	4607      	mov	r7, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	b10a      	cbz	r2, 8003f6a <_printf_common+0x26>
 8003f66:	3301      	adds	r3, #1
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	0699      	lsls	r1, r3, #26
 8003f6e:	bf42      	ittt	mi
 8003f70:	6833      	ldrmi	r3, [r6, #0]
 8003f72:	3302      	addmi	r3, #2
 8003f74:	6033      	strmi	r3, [r6, #0]
 8003f76:	6825      	ldr	r5, [r4, #0]
 8003f78:	f015 0506 	ands.w	r5, r5, #6
 8003f7c:	d106      	bne.n	8003f8c <_printf_common+0x48>
 8003f7e:	f104 0a19 	add.w	sl, r4, #25
 8003f82:	68e3      	ldr	r3, [r4, #12]
 8003f84:	6832      	ldr	r2, [r6, #0]
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	42ab      	cmp	r3, r5
 8003f8a:	dc26      	bgt.n	8003fda <_printf_common+0x96>
 8003f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f90:	1e13      	subs	r3, r2, #0
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	bf18      	it	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	0692      	lsls	r2, r2, #26
 8003f9a:	d42b      	bmi.n	8003ff4 <_printf_common+0xb0>
 8003f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	47c0      	blx	r8
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d01e      	beq.n	8003fe8 <_printf_common+0xa4>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	68e5      	ldr	r5, [r4, #12]
 8003fae:	6832      	ldr	r2, [r6, #0]
 8003fb0:	f003 0306 	and.w	r3, r3, #6
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	bf08      	it	eq
 8003fb8:	1aad      	subeq	r5, r5, r2
 8003fba:	68a3      	ldr	r3, [r4, #8]
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	bf0c      	ite	eq
 8003fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc4:	2500      	movne	r5, #0
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	bfc4      	itt	gt
 8003fca:	1a9b      	subgt	r3, r3, r2
 8003fcc:	18ed      	addgt	r5, r5, r3
 8003fce:	2600      	movs	r6, #0
 8003fd0:	341a      	adds	r4, #26
 8003fd2:	42b5      	cmp	r5, r6
 8003fd4:	d11a      	bne.n	800400c <_printf_common+0xc8>
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	e008      	b.n	8003fec <_printf_common+0xa8>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4652      	mov	r2, sl
 8003fde:	4649      	mov	r1, r9
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	47c0      	blx	r8
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d103      	bne.n	8003ff0 <_printf_common+0xac>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff0:	3501      	adds	r5, #1
 8003ff2:	e7c6      	b.n	8003f82 <_printf_common+0x3e>
 8003ff4:	18e1      	adds	r1, r4, r3
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	2030      	movs	r0, #48	; 0x30
 8003ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ffe:	4422      	add	r2, r4
 8004000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004008:	3302      	adds	r3, #2
 800400a:	e7c7      	b.n	8003f9c <_printf_common+0x58>
 800400c:	2301      	movs	r3, #1
 800400e:	4622      	mov	r2, r4
 8004010:	4649      	mov	r1, r9
 8004012:	4638      	mov	r0, r7
 8004014:	47c0      	blx	r8
 8004016:	3001      	adds	r0, #1
 8004018:	d0e6      	beq.n	8003fe8 <_printf_common+0xa4>
 800401a:	3601      	adds	r6, #1
 800401c:	e7d9      	b.n	8003fd2 <_printf_common+0x8e>
	...

08004020 <_printf_i>:
 8004020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004024:	7e0f      	ldrb	r7, [r1, #24]
 8004026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004028:	2f78      	cmp	r7, #120	; 0x78
 800402a:	4691      	mov	r9, r2
 800402c:	4680      	mov	r8, r0
 800402e:	460c      	mov	r4, r1
 8004030:	469a      	mov	sl, r3
 8004032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004036:	d807      	bhi.n	8004048 <_printf_i+0x28>
 8004038:	2f62      	cmp	r7, #98	; 0x62
 800403a:	d80a      	bhi.n	8004052 <_printf_i+0x32>
 800403c:	2f00      	cmp	r7, #0
 800403e:	f000 80d8 	beq.w	80041f2 <_printf_i+0x1d2>
 8004042:	2f58      	cmp	r7, #88	; 0x58
 8004044:	f000 80a3 	beq.w	800418e <_printf_i+0x16e>
 8004048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800404c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004050:	e03a      	b.n	80040c8 <_printf_i+0xa8>
 8004052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004056:	2b15      	cmp	r3, #21
 8004058:	d8f6      	bhi.n	8004048 <_printf_i+0x28>
 800405a:	a101      	add	r1, pc, #4	; (adr r1, 8004060 <_printf_i+0x40>)
 800405c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004060:	080040b9 	.word	0x080040b9
 8004064:	080040cd 	.word	0x080040cd
 8004068:	08004049 	.word	0x08004049
 800406c:	08004049 	.word	0x08004049
 8004070:	08004049 	.word	0x08004049
 8004074:	08004049 	.word	0x08004049
 8004078:	080040cd 	.word	0x080040cd
 800407c:	08004049 	.word	0x08004049
 8004080:	08004049 	.word	0x08004049
 8004084:	08004049 	.word	0x08004049
 8004088:	08004049 	.word	0x08004049
 800408c:	080041d9 	.word	0x080041d9
 8004090:	080040fd 	.word	0x080040fd
 8004094:	080041bb 	.word	0x080041bb
 8004098:	08004049 	.word	0x08004049
 800409c:	08004049 	.word	0x08004049
 80040a0:	080041fb 	.word	0x080041fb
 80040a4:	08004049 	.word	0x08004049
 80040a8:	080040fd 	.word	0x080040fd
 80040ac:	08004049 	.word	0x08004049
 80040b0:	08004049 	.word	0x08004049
 80040b4:	080041c3 	.word	0x080041c3
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	1d1a      	adds	r2, r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	602a      	str	r2, [r5, #0]
 80040c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0a3      	b.n	8004214 <_printf_i+0x1f4>
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	6829      	ldr	r1, [r5, #0]
 80040d0:	0606      	lsls	r6, r0, #24
 80040d2:	f101 0304 	add.w	r3, r1, #4
 80040d6:	d50a      	bpl.n	80040ee <_printf_i+0xce>
 80040d8:	680e      	ldr	r6, [r1, #0]
 80040da:	602b      	str	r3, [r5, #0]
 80040dc:	2e00      	cmp	r6, #0
 80040de:	da03      	bge.n	80040e8 <_printf_i+0xc8>
 80040e0:	232d      	movs	r3, #45	; 0x2d
 80040e2:	4276      	negs	r6, r6
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e8:	485e      	ldr	r0, [pc, #376]	; (8004264 <_printf_i+0x244>)
 80040ea:	230a      	movs	r3, #10
 80040ec:	e019      	b.n	8004122 <_printf_i+0x102>
 80040ee:	680e      	ldr	r6, [r1, #0]
 80040f0:	602b      	str	r3, [r5, #0]
 80040f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040f6:	bf18      	it	ne
 80040f8:	b236      	sxthne	r6, r6
 80040fa:	e7ef      	b.n	80040dc <_printf_i+0xbc>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	1d19      	adds	r1, r3, #4
 8004102:	6029      	str	r1, [r5, #0]
 8004104:	0601      	lsls	r1, r0, #24
 8004106:	d501      	bpl.n	800410c <_printf_i+0xec>
 8004108:	681e      	ldr	r6, [r3, #0]
 800410a:	e002      	b.n	8004112 <_printf_i+0xf2>
 800410c:	0646      	lsls	r6, r0, #25
 800410e:	d5fb      	bpl.n	8004108 <_printf_i+0xe8>
 8004110:	881e      	ldrh	r6, [r3, #0]
 8004112:	4854      	ldr	r0, [pc, #336]	; (8004264 <_printf_i+0x244>)
 8004114:	2f6f      	cmp	r7, #111	; 0x6f
 8004116:	bf0c      	ite	eq
 8004118:	2308      	moveq	r3, #8
 800411a:	230a      	movne	r3, #10
 800411c:	2100      	movs	r1, #0
 800411e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004122:	6865      	ldr	r5, [r4, #4]
 8004124:	60a5      	str	r5, [r4, #8]
 8004126:	2d00      	cmp	r5, #0
 8004128:	bfa2      	ittt	ge
 800412a:	6821      	ldrge	r1, [r4, #0]
 800412c:	f021 0104 	bicge.w	r1, r1, #4
 8004130:	6021      	strge	r1, [r4, #0]
 8004132:	b90e      	cbnz	r6, 8004138 <_printf_i+0x118>
 8004134:	2d00      	cmp	r5, #0
 8004136:	d04d      	beq.n	80041d4 <_printf_i+0x1b4>
 8004138:	4615      	mov	r5, r2
 800413a:	fbb6 f1f3 	udiv	r1, r6, r3
 800413e:	fb03 6711 	mls	r7, r3, r1, r6
 8004142:	5dc7      	ldrb	r7, [r0, r7]
 8004144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004148:	4637      	mov	r7, r6
 800414a:	42bb      	cmp	r3, r7
 800414c:	460e      	mov	r6, r1
 800414e:	d9f4      	bls.n	800413a <_printf_i+0x11a>
 8004150:	2b08      	cmp	r3, #8
 8004152:	d10b      	bne.n	800416c <_printf_i+0x14c>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	07de      	lsls	r6, r3, #31
 8004158:	d508      	bpl.n	800416c <_printf_i+0x14c>
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	6861      	ldr	r1, [r4, #4]
 800415e:	4299      	cmp	r1, r3
 8004160:	bfde      	ittt	le
 8004162:	2330      	movle	r3, #48	; 0x30
 8004164:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004168:	f105 35ff 	addle.w	r5, r5, #4294967295
 800416c:	1b52      	subs	r2, r2, r5
 800416e:	6122      	str	r2, [r4, #16]
 8004170:	f8cd a000 	str.w	sl, [sp]
 8004174:	464b      	mov	r3, r9
 8004176:	aa03      	add	r2, sp, #12
 8004178:	4621      	mov	r1, r4
 800417a:	4640      	mov	r0, r8
 800417c:	f7ff fee2 	bl	8003f44 <_printf_common>
 8004180:	3001      	adds	r0, #1
 8004182:	d14c      	bne.n	800421e <_printf_i+0x1fe>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	b004      	add	sp, #16
 800418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418e:	4835      	ldr	r0, [pc, #212]	; (8004264 <_printf_i+0x244>)
 8004190:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004194:	6829      	ldr	r1, [r5, #0]
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	f851 6b04 	ldr.w	r6, [r1], #4
 800419c:	6029      	str	r1, [r5, #0]
 800419e:	061d      	lsls	r5, r3, #24
 80041a0:	d514      	bpl.n	80041cc <_printf_i+0x1ac>
 80041a2:	07df      	lsls	r7, r3, #31
 80041a4:	bf44      	itt	mi
 80041a6:	f043 0320 	orrmi.w	r3, r3, #32
 80041aa:	6023      	strmi	r3, [r4, #0]
 80041ac:	b91e      	cbnz	r6, 80041b6 <_printf_i+0x196>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	f023 0320 	bic.w	r3, r3, #32
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	2310      	movs	r3, #16
 80041b8:	e7b0      	b.n	800411c <_printf_i+0xfc>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	f043 0320 	orr.w	r3, r3, #32
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	2378      	movs	r3, #120	; 0x78
 80041c4:	4828      	ldr	r0, [pc, #160]	; (8004268 <_printf_i+0x248>)
 80041c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ca:	e7e3      	b.n	8004194 <_printf_i+0x174>
 80041cc:	0659      	lsls	r1, r3, #25
 80041ce:	bf48      	it	mi
 80041d0:	b2b6      	uxthmi	r6, r6
 80041d2:	e7e6      	b.n	80041a2 <_printf_i+0x182>
 80041d4:	4615      	mov	r5, r2
 80041d6:	e7bb      	b.n	8004150 <_printf_i+0x130>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	6826      	ldr	r6, [r4, #0]
 80041dc:	6961      	ldr	r1, [r4, #20]
 80041de:	1d18      	adds	r0, r3, #4
 80041e0:	6028      	str	r0, [r5, #0]
 80041e2:	0635      	lsls	r5, r6, #24
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	d501      	bpl.n	80041ec <_printf_i+0x1cc>
 80041e8:	6019      	str	r1, [r3, #0]
 80041ea:	e002      	b.n	80041f2 <_printf_i+0x1d2>
 80041ec:	0670      	lsls	r0, r6, #25
 80041ee:	d5fb      	bpl.n	80041e8 <_printf_i+0x1c8>
 80041f0:	8019      	strh	r1, [r3, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	6123      	str	r3, [r4, #16]
 80041f6:	4615      	mov	r5, r2
 80041f8:	e7ba      	b.n	8004170 <_printf_i+0x150>
 80041fa:	682b      	ldr	r3, [r5, #0]
 80041fc:	1d1a      	adds	r2, r3, #4
 80041fe:	602a      	str	r2, [r5, #0]
 8004200:	681d      	ldr	r5, [r3, #0]
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	2100      	movs	r1, #0
 8004206:	4628      	mov	r0, r5
 8004208:	f7fb ffea 	bl	80001e0 <memchr>
 800420c:	b108      	cbz	r0, 8004212 <_printf_i+0x1f2>
 800420e:	1b40      	subs	r0, r0, r5
 8004210:	6060      	str	r0, [r4, #4]
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	2300      	movs	r3, #0
 8004218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800421c:	e7a8      	b.n	8004170 <_printf_i+0x150>
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	462a      	mov	r2, r5
 8004222:	4649      	mov	r1, r9
 8004224:	4640      	mov	r0, r8
 8004226:	47d0      	blx	sl
 8004228:	3001      	adds	r0, #1
 800422a:	d0ab      	beq.n	8004184 <_printf_i+0x164>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	079b      	lsls	r3, r3, #30
 8004230:	d413      	bmi.n	800425a <_printf_i+0x23a>
 8004232:	68e0      	ldr	r0, [r4, #12]
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	4298      	cmp	r0, r3
 8004238:	bfb8      	it	lt
 800423a:	4618      	movlt	r0, r3
 800423c:	e7a4      	b.n	8004188 <_printf_i+0x168>
 800423e:	2301      	movs	r3, #1
 8004240:	4632      	mov	r2, r6
 8004242:	4649      	mov	r1, r9
 8004244:	4640      	mov	r0, r8
 8004246:	47d0      	blx	sl
 8004248:	3001      	adds	r0, #1
 800424a:	d09b      	beq.n	8004184 <_printf_i+0x164>
 800424c:	3501      	adds	r5, #1
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	9903      	ldr	r1, [sp, #12]
 8004252:	1a5b      	subs	r3, r3, r1
 8004254:	42ab      	cmp	r3, r5
 8004256:	dcf2      	bgt.n	800423e <_printf_i+0x21e>
 8004258:	e7eb      	b.n	8004232 <_printf_i+0x212>
 800425a:	2500      	movs	r5, #0
 800425c:	f104 0619 	add.w	r6, r4, #25
 8004260:	e7f5      	b.n	800424e <_printf_i+0x22e>
 8004262:	bf00      	nop
 8004264:	0800458d 	.word	0x0800458d
 8004268:	0800459e 	.word	0x0800459e

0800426c <_sbrk_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4d06      	ldr	r5, [pc, #24]	; (8004288 <_sbrk_r+0x1c>)
 8004270:	2300      	movs	r3, #0
 8004272:	4604      	mov	r4, r0
 8004274:	4608      	mov	r0, r1
 8004276:	602b      	str	r3, [r5, #0]
 8004278:	f7fc fcb6 	bl	8000be8 <_sbrk>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_sbrk_r+0x1a>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	b103      	cbz	r3, 8004286 <_sbrk_r+0x1a>
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	20000138 	.word	0x20000138

0800428c <__sread>:
 800428c:	b510      	push	{r4, lr}
 800428e:	460c      	mov	r4, r1
 8004290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004294:	f000 f8a0 	bl	80043d8 <_read_r>
 8004298:	2800      	cmp	r0, #0
 800429a:	bfab      	itete	ge
 800429c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800429e:	89a3      	ldrhlt	r3, [r4, #12]
 80042a0:	181b      	addge	r3, r3, r0
 80042a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042a6:	bfac      	ite	ge
 80042a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042aa:	81a3      	strhlt	r3, [r4, #12]
 80042ac:	bd10      	pop	{r4, pc}

080042ae <__swrite>:
 80042ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b2:	461f      	mov	r7, r3
 80042b4:	898b      	ldrh	r3, [r1, #12]
 80042b6:	05db      	lsls	r3, r3, #23
 80042b8:	4605      	mov	r5, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	4616      	mov	r6, r2
 80042be:	d505      	bpl.n	80042cc <__swrite+0x1e>
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	2302      	movs	r3, #2
 80042c6:	2200      	movs	r2, #0
 80042c8:	f000 f868 	bl	800439c <_lseek_r>
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	4632      	mov	r2, r6
 80042da:	463b      	mov	r3, r7
 80042dc:	4628      	mov	r0, r5
 80042de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042e2:	f000 b817 	b.w	8004314 <_write_r>

080042e6 <__sseek>:
 80042e6:	b510      	push	{r4, lr}
 80042e8:	460c      	mov	r4, r1
 80042ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ee:	f000 f855 	bl	800439c <_lseek_r>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	bf15      	itete	ne
 80042f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80042fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004302:	81a3      	strheq	r3, [r4, #12]
 8004304:	bf18      	it	ne
 8004306:	81a3      	strhne	r3, [r4, #12]
 8004308:	bd10      	pop	{r4, pc}

0800430a <__sclose>:
 800430a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800430e:	f000 b813 	b.w	8004338 <_close_r>
	...

08004314 <_write_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4d07      	ldr	r5, [pc, #28]	; (8004334 <_write_r+0x20>)
 8004318:	4604      	mov	r4, r0
 800431a:	4608      	mov	r0, r1
 800431c:	4611      	mov	r1, r2
 800431e:	2200      	movs	r2, #0
 8004320:	602a      	str	r2, [r5, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	f7fc fc0f 	bl	8000b46 <_write>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d102      	bne.n	8004332 <_write_r+0x1e>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	b103      	cbz	r3, 8004332 <_write_r+0x1e>
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	20000138 	.word	0x20000138

08004338 <_close_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4d06      	ldr	r5, [pc, #24]	; (8004354 <_close_r+0x1c>)
 800433c:	2300      	movs	r3, #0
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	f7fc fc1b 	bl	8000b7e <_close>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_close_r+0x1a>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_close_r+0x1a>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	20000138 	.word	0x20000138

08004358 <_fstat_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4d07      	ldr	r5, [pc, #28]	; (8004378 <_fstat_r+0x20>)
 800435c:	2300      	movs	r3, #0
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	4611      	mov	r1, r2
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	f7fc fc16 	bl	8000b96 <_fstat>
 800436a:	1c43      	adds	r3, r0, #1
 800436c:	d102      	bne.n	8004374 <_fstat_r+0x1c>
 800436e:	682b      	ldr	r3, [r5, #0]
 8004370:	b103      	cbz	r3, 8004374 <_fstat_r+0x1c>
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	bd38      	pop	{r3, r4, r5, pc}
 8004376:	bf00      	nop
 8004378:	20000138 	.word	0x20000138

0800437c <_isatty_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4d06      	ldr	r5, [pc, #24]	; (8004398 <_isatty_r+0x1c>)
 8004380:	2300      	movs	r3, #0
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	f7fc fc15 	bl	8000bb6 <_isatty>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_isatty_r+0x1a>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b103      	cbz	r3, 8004396 <_isatty_r+0x1a>
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	20000138 	.word	0x20000138

0800439c <_lseek_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	4d07      	ldr	r5, [pc, #28]	; (80043bc <_lseek_r+0x20>)
 80043a0:	4604      	mov	r4, r0
 80043a2:	4608      	mov	r0, r1
 80043a4:	4611      	mov	r1, r2
 80043a6:	2200      	movs	r2, #0
 80043a8:	602a      	str	r2, [r5, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f7fc fc0e 	bl	8000bcc <_lseek>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d102      	bne.n	80043ba <_lseek_r+0x1e>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	b103      	cbz	r3, 80043ba <_lseek_r+0x1e>
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	20000138 	.word	0x20000138

080043c0 <__malloc_lock>:
 80043c0:	4801      	ldr	r0, [pc, #4]	; (80043c8 <__malloc_lock+0x8>)
 80043c2:	f7ff bb1d 	b.w	8003a00 <__retarget_lock_acquire_recursive>
 80043c6:	bf00      	nop
 80043c8:	2000012c 	.word	0x2000012c

080043cc <__malloc_unlock>:
 80043cc:	4801      	ldr	r0, [pc, #4]	; (80043d4 <__malloc_unlock+0x8>)
 80043ce:	f7ff bb18 	b.w	8003a02 <__retarget_lock_release_recursive>
 80043d2:	bf00      	nop
 80043d4:	2000012c 	.word	0x2000012c

080043d8 <_read_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4d07      	ldr	r5, [pc, #28]	; (80043f8 <_read_r+0x20>)
 80043dc:	4604      	mov	r4, r0
 80043de:	4608      	mov	r0, r1
 80043e0:	4611      	mov	r1, r2
 80043e2:	2200      	movs	r2, #0
 80043e4:	602a      	str	r2, [r5, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f7fc fb90 	bl	8000b0c <_read>
 80043ec:	1c43      	adds	r3, r0, #1
 80043ee:	d102      	bne.n	80043f6 <_read_r+0x1e>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	b103      	cbz	r3, 80043f6 <_read_r+0x1e>
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	bd38      	pop	{r3, r4, r5, pc}
 80043f8:	20000138 	.word	0x20000138

080043fc <_init>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr

08004408 <_fini>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	bf00      	nop
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr
